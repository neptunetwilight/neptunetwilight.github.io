<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Twilight&#39;s blog</title>
  
  <subtitle>记录学习中的笔记和问题</subtitle>
  <link href="https://neptunetwilight.github.io/atom.xml" rel="self"/>
  
  <link href="https://neptunetwilight.github.io/"/>
  <updated>2021-04-15T15:56:48.881Z</updated>
  <id>https://neptunetwilight.github.io/</id>
  
  <author>
    <name>TwilightCoder</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot自动配置原理</title>
    <link href="https://neptunetwilight.github.io/2021/03/17/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
    <id>https://neptunetwilight.github.io/2021/03/17/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</id>
    <published>2021-03-17T14:26:49.000Z</published>
    <updated>2021-04-15T15:56:48.881Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SpringBoot注册组件"><a href="#SpringBoot注册组件" class="headerlink" title="SpringBoot注册组件"></a>SpringBoot注册组件</h2><h3 id="1、-Configuration和-Bean注释注册"><a href="#1、-Configuration和-Bean注释注册" class="headerlink" title="1、@Configuration和@Bean注释注册"></a>1、@Configuration和@Bean注释注册</h3><ul><li><strong>这种方式注册组件也就是自己写一个配置类，用@Configuration标注它是一个配置类，然后用@Bean注释说明给容器导入的是以下组件，而且还可以更改组件别名alias</strong></li></ul><p><strong>自定义的java配置文件：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2、配置类本身也是组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3、proxyBeanMethods：代理bean方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> users <span class="title">uu01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> users(<span class="string">&quot;mea&quot;</span>,<span class="number">34</span>,<span class="string">&quot;female&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;jerry&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> pet <span class="title">ptt</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> pet(<span class="string">&quot;jerry&quot;</span>,<span class="number">4</span>,<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注：这里我注册了两个组件分别是uu01和jerry，第二个使用了别名</strong></li></ul><p><strong>springboot应用配置:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration(exclude= &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.example.again&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、返回IOC容器</span></span><br><span class="line">ConfigurableApplicationContext run=SpringApplication.run(AgainApplication.class, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、查看容器内组件</span></span><br><span class="line">String[] names=run.getBeanDefinitionNames();</span><br><span class="line"><span class="keyword">for</span> (String name:names</span><br><span class="line"> ) &#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、从容器中获取组件</span></span><br><span class="line">pet jerry01=run.getBean(<span class="string">&quot;jerry&quot;</span>,pet.class);</span><br><span class="line"></span><br><span class="line">pet jerry02=run.getBean(<span class="string">&quot;jerry&quot;</span>,pet.class);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;组件:&quot;</span>+(jerry01==jerry02));</span><br><span class="line"></span><br><span class="line"><span class="comment">//得出注册来的组件就是单实例的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@EnableAutoConfiguration后因为我一开始创建项目加入了jdbc项目，所以被强迫得和数据库关联，没办法，暂时把关联数据库配置关了</strong></p><p>启动应用后，控制台出现了我们刚刚往容器中添加的三个组件（包含MyConfig配置文件），并且验证了注册到容器中的组件为单实例</p><p><img src="/img/console/%E8%8E%B7%E5%8F%96%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%90%84%E4%B8%AA%E7%BB%84%E4%BB%B6.png" alt="console01"></p><p><strong>其中，@Configuration注释中还有一个@proxyBeanMethods：代理bean方法，主要用于处理组件之间依赖关系</strong></p><ul><li><strong>@proxyBeanMethods：true情况下，调用配置类中注册组件方法，会从容器中寻找的单实例对象</strong></li></ul><p><strong>springboot应用配置:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取容器中的配置类组件</span></span><br><span class="line">       MyConfig bean=run.getBean(MyConfig.class);</span><br><span class="line">       System.out.println(bean);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//验证这两个users是从容器中获取还是只是调用配置类中方法</span></span><br><span class="line">       <span class="comment">//得出以下是@Configuration(proxyBeanMethods = false)代理对象调用方法，容器中有则直接拿，没有再选择调用</span></span><br><span class="line">       <span class="comment">//因而springboot总会检查这个组件是否在容器中有</span></span><br><span class="line">       users user01=bean.uu01();</span><br><span class="line">       users user02=bean.uu01();</span><br><span class="line"></span><br><span class="line">       System.out.println(user01==user02);</span><br></pre></td></tr></table></figure><p><img src="/img/console/proxybeanmethod.png" alt="proxyBeanMethods=true"></p><ul><li><strong>@proxyBeanMethods：false情况下，容器中不会保存代理对象，每次的调用都相当于重新创建了这个对象</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br></pre></td></tr></table></figure><p><img src="/img/console/proxy%E4%B8%BAfalse.png" alt="proxyBeanMethods=false"></p><p><strong>注：举个很简单的例子，比如user用户养了一个宠物，用户想用pet里的方法，这就构成了组件依赖，如果将代理bean方法写成true，这种依赖就是成立的，如果调成false的话相当于重新new了一个宠物，两个调用方法就不是一个东西了虽然都叫jerry</strong></p><h3 id="2、-import注释注册组件"><a href="#2、-import注释注册组件" class="headerlink" title="2、@import注释注册组件"></a>2、@import注释注册组件</h3><p><strong>MyConfig：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *4、@Import(&#123;users.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="comment"> *给容器中自动创建出导入的两个类型的组件，默认组件的名字为全类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Import(&#123;users.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br></pre></td></tr></table></figure><p><strong>springboot应用配置:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有users类型组件的名字</span></span><br><span class="line">        String[] beanNamesForType=run.getBeanNamesForType(users.class);</span><br><span class="line">        <span class="keyword">for</span> (String nn:beanNamesForType</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(nn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DBHelper bean1=run.getBean(DBHelper.class);</span><br><span class="line">        System.out.println(bean1);</span><br></pre></td></tr></table></figure><p><img src="/img/console/import%E6%B3%A8%E5%86%8C.png" alt="import导入的组件"></p><h3 id="3、条件装配-Condionalxxxxx"><a href="#3、条件装配-Condionalxxxxx" class="headerlink" title="3、条件装配(@Condionalxxxxx)"></a>3、条件装配(@Condionalxxxxx)</h3><ul><li><strong>和它的翻译一样就是根据条件判断要不要将组件注册到容器中去的注释，至于里面可填写的参数可参照：</strong></li></ul><p><strong>以@ConditionalOnMissingBean为例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnMissingBean &#123;</span><br><span class="line"><span class="comment">// 需要检查的 bean 的 class 类型。当 ApplicationContext 不包含每一个被指定的 class 时条件匹配。</span></span><br><span class="line">Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 需要检查的 bean 的 class 类型名称。当 ApplicationContext 不包含每一个被指定的 class 时条件匹配。</span></span><br><span class="line">String[] type() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 识别匹配 bean 时，可以被忽略的 bean 的 class 类型</span></span><br><span class="line">Class&lt;?&gt;[] ignored() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 识别匹配 bean 时，可以被忽略的 bean 的 class 类型名称</span></span><br><span class="line">String[] ignoredType() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 当 ApplicationContext 不包含带有这些注解的 bean 时条件匹配。</span></span><br><span class="line">Class&lt;? extends Annotation&gt;[] annotation() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 需要检查的 bean 的 name。当 ApplicationContext 不包含任意指定的每一个的 class 时条件匹配。</span></span><br><span class="line">String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 搜索容器层级,当前容器,父容器</span></span><br><span class="line"><span class="function">SearchStrategy <span class="title">search</span><span class="params">()</span> <span class="keyword">default</span> SearchStrategy.ALL</span>;</span><br><span class="line"><span class="comment">// 可能在其泛型参数中包含指定bean类型的其他类</span></span><br><span class="line">Class&lt;?&gt;[] parameterizedContainer() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>下来测试一下条件装配的效果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(name=&quot;jerry&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> users <span class="title">uu01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> users(<span class="string">&quot;mea&quot;</span>,<span class="number">34</span>,<span class="string">&quot;female&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;jerry&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> pet <span class="title">ptt</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> pet(<span class="string">&quot;jerry&quot;</span>,<span class="number">4</span>,<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上述是指当容器中包含jerry的组件时注册uu01到容器中</strong></p><p><strong>测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> jerry=run.containsBean(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中有没有jerry &quot;</span>+jerry);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> u01= run.containsBean(<span class="string">&quot;uu01&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中有没有uu01 &quot;</span>+u01);</span><br></pre></td></tr></table></figure><p><img src="/img/console/%E5%88%A4%E6%96%AD.png" alt="console02"></p><p><strong>注：可见容器中有jerry组件，但是却没有uu01，这是因为uu01比jerry先注册到容器中，注册时候判断，结果为容器中还没有jerry组件，所以没有注册，因此没有uu01组件，如果我将两者注册顺序颠倒，则会得到以下结果</strong></p><p><img src="/img/console/%E5%88%A4%E6%96%AD2.png" alt="console03"></p><h3 id="4、加载已有的配置文件-ImportResource"><a href="#4、加载已有的配置文件-ImportResource" class="headerlink" title="4、加载已有的配置文件(@ImportResource)"></a>4、加载已有的配置文件(@ImportResource)</h3><ul><li><strong>如果你有已经配置好的组件，可以用以前配置xml文件写法进行组件的导入</strong></li></ul><p><strong>xml配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;users01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.again.entity.users&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mea&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;34&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ppt&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.again.entity.pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jerry&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cheese&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>导入配置文件：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = &quot;beans.xml&quot;)</span></span><br></pre></td></tr></table></figure><p><strong>重新检测容器中是否已经有注册的users01和ppt组件</strong><br><img src="/img/console/%E6%A3%80%E6%B5%8B%E5%AE%B9%E5%99%A8.png" alt="console03"></p><h3 id="5、配置绑定-ConfigurationProperties"><a href="#5、配置绑定-ConfigurationProperties" class="headerlink" title="5、配置绑定(@ConfigurationProperties)"></a>5、配置绑定(@ConfigurationProperties)</h3><p><strong>在做项目的时候需要使用代码实现读取properties文件内容，使用@value(name=”xxx”)去读取，但是当参数变多的时候，通过@value操作就显得臃肿。springboot提供了更加简单的操作：那就是通过@ConfigurationProperties一次性读取并映射到javabean。</strong></p><ul><li><strong>配置绑定有两种方式，一种是直接在实体类中进行，先将实体类加入到容器中，才能进行依赖注入，所以需要@Component注释，其次如果想要自己指定加载的配置文件可以加上@PropertySource指定文件路径，最后用@ConfigurationProperties进行绑定</strong></li></ul><p><strong>实体类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;chara.properties&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;chara&quot;)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span></span></span><br><span class="line"><span class="comment"> * 添加到容器中</span></span><br><span class="line"><span class="comment"> * 需要将此组件添加到容器中才可进行配置绑定<span class="doctag">@ConfigurationProperties</span>(prefix = &quot;chara&quot;)</span></span><br><span class="line"><span class="comment"> * 如果需要自定义配置文件，则可以使用<span class="doctag">@PropertySource</span>(&quot;chara.properties&quot;)选择自己定义的配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">character</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String ability;</span><br><span class="line">    <span class="keyword">private</span> String temperament;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">character</span><span class="params">(String name, String age, String sex, String ability, String temperament)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.ability = ability;</span><br><span class="line">        <span class="keyword">this</span>.temperament = temperament;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAbility</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ability;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAbility</span><span class="params">(String ability)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ability = ability;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTemperament</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperament;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemperament</span><span class="params">(String temperament)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperament = temperament;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;character&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ability=&#x27;&quot;</span> + ability + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, temperament=&#x27;&quot;</span> + temperament + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">character</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>chara配置文件：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">chara.name</span>=<span class="string">zhuqi</span></span><br><span class="line"><span class="meta">chara.age</span>=<span class="string">21</span></span><br><span class="line"><span class="meta">chara.sex</span>=<span class="string">male</span></span><br><span class="line"><span class="meta">chara.ability</span>=<span class="string">smell</span></span><br><span class="line"><span class="meta">chara.temperament</span>=<span class="string">irascible</span></span><br></pre></td></tr></table></figure><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    character cc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/character&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> character <span class="title">character</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/json/%E9%85%8D%E7%BD%AE%E7%BB%91%E5%AE%9A%E7%BB%93%E6%9E%9C.png" alt="json数据"></p><p><strong>第二种方式是在@EnableConfigurationProperties上进行配置绑定，开启指定的配置绑定，然后注释会自动添加指定的实体类进容器，同时不要忘记加上@PropertySource自定义配置文件地址指定</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = &quot;beans.xml&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(character.class)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;chara.properties&quot;)</span></span><br><span class="line"><span class="comment">//1.开启character的配置绑定功能</span></span><br><span class="line"><span class="comment">//2.将character组件自动注入到容器中</span></span><br><span class="line"><span class="comment">//3.在哪进行属性配置绑定在哪加入@PropertySource(&quot;chara.properties&quot;)自定义配置文件地址指定</span></span><br></pre></td></tr></table></figure><p><strong>注：同时实体类还是得有@ConfigurationProperties(prefix = “chara”)要标注和哪个配置文件绑定</strong></p><h2 id="SpringBoot2-x自动配置原理探究"><a href="#SpringBoot2-x自动配置原理探究" class="headerlink" title="SpringBoot2.x自动配置原理探究"></a>SpringBoot2.x自动配置原理探究</h2><ul><li><p><strong>SpringBoot自动配置首先关键的是@SpringBootApplication这个配置类，他其中包括三个子配置注释@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan</strong><br><img src="/img/autoconfig/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE.png" alt="内部注释"></p></li><li><p><strong>@SpringBootConfiguration中可以看到@Configuration，那就是说他自己也是一个配置类，继续下一个@ComponentScan,他也就是一个包扫描的注释，那么最后问题都在@EnableAutoConfiguration</strong></p></li></ul><p><img src="/img/autoconfig/SpringBootConfiguration.png" alt="@SpringBootConfiguration"></p><p><strong>进入@EnableAutoConfiguration可以看到两个关键的注释@AutoConfigurationPackage和@Import({AutoConfigurationImportSelector.class})，其他都为语言注解信息，@AutoConfigurationPackage里面有个@import导入的是register的类，进入可以看到主要的批量注册组件方法registerBeanDefinitions，其中有两个参数一个是元数据信息一个是bean的解析注册，那么回过头，这个注解肯定是标在我们源文件上的，因为SpringbootApplication注解的缘故，因此源信息里可以看到我们的包名并且保存到数组中一并注册到ioc容器中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line">       Registrar() &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">           AutoConfigurationPackages.register(registry, (String[])(<span class="keyword">new</span> AutoConfigurationPackages.PackageImports(metadata)).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> AutoConfigurationPackages.PackageImports(metadata));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="/img/autoconfig/%E6%89%B9%E9%87%8F%E6%B3%A8%E5%86%8C.png" alt="批量注册结果"></p><ul><li><strong>下来是@EnableAutoConfiguration另一个最为关键的注释@import，他导入了一个名为AutoConfigurationImportSelector自动配置导入选择器的东西，里面有一个方法名为selectImports来规定导入哪些组件，通过调用getAutoConfigurationEntry得到自动配置入口来实现，那么进入这个方法，里面有一个获取候选配置的方法getCandidateConfigurations最后发现是通过SpringFactoriesLoader的loadFactoryNames来获得配置的，首先进入SpringFactoriesLoader里面定义了FACTORIES_RESOURCE_LOCATION工厂资源的路径META-INF/spring.factories，其次再看到loadFactoryNames，类加载器为空时忽略，后面要得到工厂类型名字返回的是loadSpringFactories这个方法，它里面又有枚举的url地址指向的是刚才的FACTORIES_RESOURCE_LOCATION资源地址</strong></li></ul><p><img src="/img/autoconfig/loadSpringFactories.png" alt="loadSpringFactories"></p><p><strong>加载的资源文件是：</strong></p><p><img src="/img/autoconfig/%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6.png" alt="资源文件"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="SpringBoot整合" scheme="https://neptunetwilight.github.io/tags/SpringBoot%E6%95%B4%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>yml语法</title>
    <link href="https://neptunetwilight.github.io/2021/02/06/yml%E8%AF%AD%E6%B3%95/"/>
    <id>https://neptunetwilight.github.io/2021/02/06/yml%E8%AF%AD%E6%B3%95/</id>
    <published>2021-02-06T10:24:29.000Z</published>
    <updated>2021-02-08T09:33:50.075Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>前言：之前在用ssm框架的时候还没有接触这个语言，但是它给我的第一印象是清楚便捷，很容易划分层级关系和便于进行参数控制的语言，在用hexo主题的时候也多被用于对插件脚本的开启和参数的调整，之后在学习springboot的时候yml语言也作为配置文件常被用到（这意味着我从xml和properties中解脱了）。</strong></p><h2 id="一、YML简介"><a href="#一、YML简介" class="headerlink" title="一、YML简介"></a>一、YML简介</h2><ul><li><strong>YAML（IPA: /ˈjæməl/，尾音类似camel骆驼）是一个可读性高，用来表达资料序列的编程语言。YAML参考了其他多种语言，<br>包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822。Clark Evans在2001年在首次发表了这种语言，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者。目前已经有数种编程语言或脚本语言支援（或者说解析）这种语言，通常以.yml为后缀的文件，是一种直观的能够被电脑识别的数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，一种专门用来写配置文件的语言。</strong></li></ul><h2 id="二、YML特点"><a href="#二、YML特点" class="headerlink" title="二、YML特点"></a>二、YML特点</h2><ul><li><p><strong>YAML易于人们阅读</strong></p></li><li><p><strong>YAML数据在编程语言之间是可移植的</strong></p></li><li><p><strong>YAML匹配敏捷语言的本机数据结构</strong></p></li><li><p><strong>YAML具有一致的模型来支持通用工具</strong></p></li><li><p><strong>YAML具有一致的模型来支持通用工具</strong></p></li><li><p><strong>YAML具有表现力和可扩展性</strong></p></li><li><p><strong>YAML易于实现和使用</strong></p></li></ul><h2 id="三、YML语法"><a href="#三、YML语法" class="headerlink" title="三、YML语法"></a>三、YML语法</h2><h3 id="1、基本规定"><a href="#1、基本规定" class="headerlink" title="1、基本规定"></a>1、基本规定</h3><ul><li><p><strong>k: v 表示一对键值对关系，冒号后面必要一个空格</strong></p></li><li><p><strong>k: v 表示一对键值对关系，冒号后面必要一个空格</strong></p></li><li><p><strong>大小写敏感</strong></p></li></ul><h3 id="2、取值范围"><a href="#2、取值范围" class="headerlink" title="2、取值范围"></a>2、取值范围</h3><p><strong>字面量：普通的值（数字、字符串、布尔）</strong></p><p>k: v: 字面直接来写</p><p>字符串默认不用加上单引号或者双引号；</p><p>“ “：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身表现形式输出<br>name：”cygames \n princessconnect”：输出为：</p><p>cygames<br>princessconnect</p><p>‘ ‘：单引号；会转义字符串里特殊字符；特殊字符最后输出为普通的字符串<br>name：’cygames \n princessconnect’：输出为：</p><p>cygames \n princessconnect</p><p>—：表示一个文档开始，比如springboot配置文件中两个不同的配置文件用—分隔开</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line">  <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><p>—和…配合使用在一个配置文件中，表示一个文件的结束</p><p>!!：用以类型强制转换</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">player:</span></span><br><span class="line">  <span class="attr">card:</span> <span class="type">!!str</span> <span class="number">58964</span></span><br><span class="line">  <span class="attr">classes:</span> <span class="type">!!str</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>对象、Map（属性和值）（键值对）</strong></p><p>下一行写对象的属性和值的关系，注意缩进</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">player</span></span><br><span class="line">    <span class="attr">pid:</span> <span class="string">szb001</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">竜ヶ崎ヒイロ</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">15</span></span><br><span class="line">    <span class="attr">class:</span> <span class="string">dargon</span></span><br></pre></td></tr></table></figure><p><strong>行内写法</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">player:&#123;pid:</span> <span class="string">szb001,name:</span> <span class="string">竜ヶ崎ヒイロ,age:</span> <span class="number">15</span><span class="string">,class:</span> <span class="string">dargon&#125;</span></span><br></pre></td></tr></table></figure><p><strong>数组写法（List、Set）</strong><br>用-值表示数组中的一个元素</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shadowverse:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">card</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">class</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cost</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">effect</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">leader</span></span><br></pre></td></tr></table></figure><p><strong>行内写法</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shadowverse:</span> [<span class="string">card</span>,<span class="string">class</span>,<span class="string">cost</span>,<span class="string">effect</span>,<span class="string">leader</span>]</span><br></pre></td></tr></table></figure><h3 id="3、值的获取"><a href="#3、值的获取" class="headerlink" title="3、值的获取"></a>3、值的获取</h3><p><strong>yml文件配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">player:</span></span><br><span class="line">  <span class="attr">pid:</span> <span class="string">szb001</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">竜ヶ崎ヒイロ</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">15</span></span><br><span class="line">  <span class="attr">classes:</span> <span class="string">dargon</span></span><br><span class="line">  <span class="attr">map:</span> &#123;<span class="attr">szb001:</span> <span class="string">dargon</span>,<span class="attr">szb002:</span> <span class="string">witch</span>&#125;</span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">竜ヶ崎ヒイロ</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">夜那月路西亚</span></span><br><span class="line">  <span class="attr">card:</span></span><br><span class="line">    <span class="attr">cardid:</span> <span class="string">c001</span></span><br><span class="line">    <span class="attr">cost:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">dd</span></span><br><span class="line">    <span class="attr">classes:</span> <span class="string">normal</span></span><br></pre></td></tr></table></figure><p>在实体类中直接和yml配置文件进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.princess.character.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@ConfigurationProperties</span>：告诉springboot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *          prefix = &quot;player&quot;:配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *   只有这个组件是容器中的组件，才能用容器中提供的 <span class="doctag">@ConfigurationProperties</span> 功能</span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//component意思为把普通pojo实例化到spring容器中，相当于配置文件中的</span></span><br><span class="line"><span class="comment">//&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;player&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String pid;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String age;</span><br><span class="line"><span class="keyword">private</span> String classes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line"><span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line"><span class="keyword">private</span> Card card;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(String pid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pid = pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getClasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> classes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClasses</span><span class="params">(String classes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.classes = classes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.map = map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Card <span class="title">getCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> card;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Card card)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.card = card;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Player&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;pid=&#x27;&quot;</span> + pid + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, classes=&#x27;&quot;</span> + classes + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, map=&quot;</span> + map +</span><br><span class="line"><span class="string">&quot;, list=&quot;</span> + list +</span><br><span class="line"><span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.princess.character;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.princess.character.entity.Player;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.RuntimeType;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.security.RunAs;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot单元测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 可以在测试期间方便的类似编码一样进行自动注入容器等功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CharacterApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Player pp;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(pp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>参考资料：</strong></p><p><a href="https://jianshu.com/p/97222440cd08">叩丁狼教育简书</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="标记语言" scheme="https://neptunetwilight.github.io/tags/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="https://neptunetwilight.github.io/2021/02/06/MyBatis/"/>
    <id>https://neptunetwilight.github.io/2021/02/06/MyBatis/</id>
    <published>2021-02-06T09:55:12.000Z</published>
    <updated>2021-02-06T10:23:08.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介:"></a>MyBatis简介:</h2><ul><li><strong>Mybatis本是apache的一个开源项目iBatis，2013年11月迁移到了Github。大家可以去github上下载各个版本，iBatis是一个基于Java的持久层框架，提供的持久层框架包括SQL Maps和Data Access Objects（DAO）。Mybatis消除了几乎所有JDBC代码和参数的手工设置以及对结果集的检索，它可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射城数据库中的记录。Mybatis提供了一种“半自动化”的ORM实现。这相对于Hibernate提供的“全自动化”而言，增加了程序操作人员对sql语句的自由操作和优化</strong></li></ul><p><img src="/img/frame/mybatis.jpg" alt="MyBatis框架图"></p><h2 id="Mybatis配置"><a href="#Mybatis配置" class="headerlink" title="Mybatis配置:"></a>Mybatis配置:</h2><p>Mybatis本身就很小而简单，没有任何第三方依赖，最简单安装只需要两个jar文件和配置几个sql映射文件</p><ul><li><p><strong>mybatis-3.4.6.jar</strong></p></li><li><p><strong>mysql-connector-java-8.0.9-rc.jar</strong></p></li></ul><p><strong>xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1、typeAliases别名处理器，可以为我们的java类型起别名 </span></span><br><span class="line"><span class="comment">alias后加上你自己命名的名字         type后加实体类路径</span></span><br><span class="line"><span class="comment">启用别名可以避免每次返回类型变得冗长而复杂</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;ccc&quot;</span> <span class="attr">type</span>=<span class="string">&quot;shadowverse.entity.card&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2、environments，环境，mybatis可以配置多种环境</span></span><br><span class="line"><span class="comment">其中可以加入environment配置更加具体环境信息 后面的id为便于切换运行环境</span></span><br><span class="line"><span class="comment">然后再为其配置事务管理器transactionManagertype=JDBC/MANAGED</span></span><br><span class="line"><span class="comment">以及数据源dataSourcetype=POOLED/UNPOOLED/JNDI</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/cygames?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useSSL=FALSE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;shadowverse/mapper/CardMapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>! ! ! 注意：这里我用的是mysql 8.0以上版本，所以要配置时区和转码以及ssl等，并且driver由原来的com.mysql.jdbc.Driver变为com.mysql.cj.jdbc.Driver。</strong></p><p><strong>实体类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shadowverse.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">card</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> c_id;</span><br><span class="line"><span class="keyword">private</span> String c_name;</span><br><span class="line"><span class="keyword">private</span> String s_class;</span><br><span class="line"><span class="keyword">private</span> String c_cost;</span><br><span class="line"><span class="keyword">private</span> String c_effect;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getC_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC_id</span><span class="params">(<span class="keyword">int</span> c_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.c_id = c_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getC_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC_name</span><span class="params">(String c_name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.c_name = c_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getS_class</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s_class;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setS_class</span><span class="params">(String s_class)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.s_class = s_class;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getC_cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC_cost</span><span class="params">(String c_cost)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.c_cost = c_cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getC_effect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_effect;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC_effect</span><span class="params">(String c_effect)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.c_effect = c_effect;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">card</span><span class="params">(<span class="keyword">int</span> c_id, String c_name, String s_class, String c_cost, String c_effect)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.c_id = c_id;</span><br><span class="line"><span class="keyword">this</span>.c_name = c_name;</span><br><span class="line"><span class="keyword">this</span>.s_class = s_class;</span><br><span class="line"><span class="keyword">this</span>.c_cost = c_cost;</span><br><span class="line"><span class="keyword">this</span>.c_effect = c_effect;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">card</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>映射文件mapper：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- namespace指定为接口全类名，以实现与接口动态绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;shadowverse.dao.CardDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- id唯一标识   接口中的 方法名，返回类型，参数类型保持一致   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line">insert into shadowverse values(</span><br><span class="line">#&#123;c_id&#125;,</span><br><span class="line">#&#123;c_name&#125;,</span><br><span class="line">#&#123;s_class&#125;,</span><br><span class="line">#&#123;c_cost&#125;,</span><br><span class="line">#&#123;c_effect&#125;</span><br><span class="line">)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 返回类型和接口一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line">select * from shadowverse</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ccc&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line">select * from shadowverse where c_id = #&#123;cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这里参数前还可以用$&#123;&#125;来给参数赋值，但是一般建议用#&#123;&#125;可防止sql注入 即$&#123;&#125;的值会直接显示用在sql上，#&#123;&#125;值是会动态调用在sql占位区中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ccc&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line">select * from shadowverse where c_id = $&#123;cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatebyId&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">update shadowverse set c_name=#&#123;c_name&#125;,s_class=#&#123;s_class&#125;,c_cost=#&#123;c_cost&#125;,c_effect=#&#123;c_effect&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">c_id = #&#123;c_id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">delete from shadowverse where c_id=#&#123;c_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdandClass&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line">select * from shadowverse where c_id=#&#123;cd&#125; and s_class=#&#123;cs&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByNameandClass&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;shadowverse.entity.card&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line">select * from shadowverse where c_name=#&#123;c_name&#125; and s_class=#&#123;s_class&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCost&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line">select * from shadowverse where c_cost=#&#123;list[0]&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>持久层接口（DAO）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shadowverse.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shadowverse.entity.card;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CardDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增加卡牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(card c)</span> <span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id更新卡牌数据（修改）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatebyId</span><span class="params">(card cx)</span> <span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除卡牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> c_id)</span> <span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有卡牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;card&gt; <span class="title">findAll</span><span class="params">()</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询卡牌数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c_id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这里运用了命名参数，给了c_id新的名字cid，所以在mapper映射那边也使用相对应的#&#123;cid&#125;</span></span><br><span class="line"><span class="comment">//多个参数命名也可以采用上述方式或者使用#&#123;param1&#125;、#&#123;param2&#125; 或者#&#123;0&#125;，#&#123;1&#125;等</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> card <span class="title">findById</span><span class="params">(<span class="meta">@Param(&quot;cid&quot;)</span> <span class="keyword">int</span> c_id)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $&#123;&#125;根据id查询卡牌信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c_id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> card <span class="title">findById2</span><span class="params">(<span class="meta">@Param(&quot;cid&quot;)</span> <span class="keyword">int</span> c_id)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当然对于参数类型还能传入map</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id和职介查询卡牌信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cdd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> card <span class="title">findByIdandClass</span><span class="params">(Map&lt;String,Object&gt; cdd)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个参数的情况下还可以传入一整个对象，然后再映射中使用#&#123;相对应的属性&#125;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据名字和职介查询卡牌信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cad</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> card <span class="title">findByNameandClass</span><span class="params">(card cad)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是list参数的情况下，mybatis也会进行特殊处理，会把参数封装成list，然后mapper映射中参数#&#123;list[0]&#125;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据名字和费用查询卡牌信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> card <span class="title">findByCost</span><span class="params">(List&lt;String&gt; ll)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shadowverse.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shadowverse.dao.CardDao;</span><br><span class="line"><span class="keyword">import</span> shadowverse.entity.card;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">InputStream is = CardTest.class.getResourceAsStream(<span class="string">&quot;/mybatis.xml&quot;</span>);</span><br><span class="line"><span class="comment">//构建sqlSession的工厂</span></span><br><span class="line">SqlSessionFactory sessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个sqlSession</span></span><br><span class="line">SqlSession session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增卡牌信息</span></span><br><span class="line">CardDao cdao=session.getMapper(CardDao.class);</span><br><span class="line">card cc=<span class="keyword">new</span> card();</span><br><span class="line">cc.setC_id(<span class="number">6</span>);</span><br><span class="line">cc.setC_name(<span class="string">&quot;深夜的鬼姬 斑比&quot;</span>);</span><br><span class="line">cc.setS_class(<span class="string">&quot;vampire&quot;</span>);</span><br><span class="line">cc.setC_cost(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">cc.setC_effect(<span class="string">&quot;入场曲：将场上所有随从变成蝙蝠1/1，并且每有一个蝙蝠对对方主战造成蝙蝠数量*2的伤害&quot;</span>);</span><br><span class="line"><span class="comment">/*cdao.save(cc);</span></span><br><span class="line"><span class="comment">session.commit();*/</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//全查所有卡牌信息</span></span><br><span class="line">List&lt;card&gt; ulist = cdao.findAll();</span><br><span class="line"><span class="keyword">for</span> (card c : ulist) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;费用：&quot;</span>+c.getC_cost()+<span class="string">&quot;\t&quot;</span>+c.getC_name()+<span class="string">&quot;   &quot;</span>+c.getC_effect());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id查询id为1的对象结果</span></span><br><span class="line">card cd=cdao.findById(<span class="number">1</span>);</span><br><span class="line">System.out.println(cd.getC_cost()+cd.getC_effect());</span><br><span class="line">System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">card co=cdao.findById2(<span class="number">4</span>);</span><br><span class="line">System.out.println(co.getC_cost()+co.getC_effect());</span><br><span class="line">System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改卡牌id为6的卡牌信息</span></span><br><span class="line">card cx=<span class="keyword">new</span> card();</span><br><span class="line">cx.setC_id(<span class="number">6</span>);</span><br><span class="line">cx.setC_name(<span class="string">&quot;苇名一心&quot;</span>);</span><br><span class="line">cx.setS_class(<span class="string">&quot;royal&quot;</span>);</span><br><span class="line">cx.setC_cost(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">cx.setC_effect(<span class="string">&quot;突进 爆能：3，此卡攻击力+2，附有亡语效果：此卡这回合如果被破坏，下回合入场，进化。进化：此卡攻击力上升至本场游戏进化次数&quot;</span>);</span><br><span class="line">cdao.updatebyId(cx);</span><br><span class="line">session.commit();</span><br><span class="line">cx=cdao.findById(<span class="number">6</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;费用：&quot;</span>+cx.getC_cost()+<span class="string">&quot;\t&quot;</span>+cx.getC_name()+<span class="string">&quot;   &quot;</span>+cx.getC_effect());</span><br><span class="line">System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除卡牌信息</span></span><br><span class="line">cdao.delete(<span class="number">3</span>);</span><br><span class="line">session.commit();</span><br><span class="line">System.out.println(<span class="string">&quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入map参数</span></span><br><span class="line">Map&lt;String,Object&gt; mm=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">mm.put(<span class="string">&quot;cd&quot;</span>, <span class="string">&quot;6&quot;</span>);</span><br><span class="line">mm.put(<span class="string">&quot;cs&quot;</span>, <span class="string">&quot;royal&quot;</span>);</span><br><span class="line">card cdd=cdao.findByIdandClass(mm);</span><br><span class="line">System.out.println(cdd.getC_name()+<span class="string">&quot;:&quot;</span>+cdd.getC_effect());</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入POJO，利用其属性为mapper映射参数命名</span></span><br><span class="line">card csd=<span class="keyword">new</span> card();</span><br><span class="line">csd.setC_name(<span class="string">&quot;魔法转生 美杜莎&quot;</span>);</span><br><span class="line">csd.setS_class(<span class="string">&quot;vampire&quot;</span>);</span><br><span class="line">cdd=cdao.findByNameandClass(csd);</span><br><span class="line">System.out.println(cdd.getC_name()+<span class="string">&quot;:&quot;</span>+cdd.getC_effect());</span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入list参数的时候</span></span><br><span class="line">List&lt;String&gt; ls=<span class="keyword">new</span> ArrayList();</span><br><span class="line">ls.add(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">ls.add(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">ls.add(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">card ss=cdao.findByCost(ls);</span><br><span class="line">System.out.println(<span class="string">&quot;费用：&quot;</span>+ss.getC_cost()+<span class="string">&quot;\t&quot;</span>+ss.getC_name()+<span class="string">&quot;   &quot;</span>+ss.getC_effect());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis里的动态sql："><a href="#Mybatis里的动态sql：" class="headerlink" title="Mybatis里的动态sql："></a>Mybatis里的动态sql：</h2><p><strong>Mybatis里还支持动态sql写法，对于以前所写的JDBC相比，动态sql无疑是开发人员最痛苦的事情，每次变更条件时都要重新写新的sql语句，再进行一系列操作。但Mybatis支持动态sql，并有一套标签为此来解决这个难题。</strong></p><ul><li><strong>if</strong></li><li><strong>choose（when，otherwise）</strong></li><li><strong>trim（when，set）</strong></li><li><strong>foreach</strong></li></ul><p><strong>持久层接口（DAO）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下为动态sql的接口</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据不同需求来查询相对应卡牌信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;card&gt; <span class="title">findByRequireIf</span><span class="params">(card cd)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据某个单个需求查询对应卡牌信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;card&gt; <span class="title">findByRequireChoose</span><span class="params">(card cr)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据不同需求来查询相对应卡牌信息 trim截取版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;card&gt; <span class="title">findByRequireTrim</span><span class="params">(card cr)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据list中的id来依次查询卡牌信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;card&gt; <span class="title">findByRequireForeach</span><span class="params">(<span class="meta">@Param(&quot;cid&quot;)</span> List&lt;Integer&gt; ls)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br></pre></td></tr></table></figure><p><strong>映射文件mapper：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态sql，一般动态sql用于sql语句需要频繁变更不同需求时候所需要用到的--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- if 根据所需不同条件来查询相对应的数据 也就是字段的添加，需要添加什么字段条件，会根据传递进来的参数判断哪些是需要的条件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByRequireIf&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line">select * from shadowverse </span><br><span class="line">where</span><br><span class="line"><span class="comment">&lt;!-- 这里的test 用了OGNL表达式（Object Graph Navigation Language）对象图导航语言</span></span><br><span class="line"><span class="comment">类似于EL JSTL表达式，基本用法：</span></span><br><span class="line"><span class="comment">访问对象属性：person.name</span></span><br><span class="line"><span class="comment">调用方法：person.getName()</span></span><br><span class="line"><span class="comment">调用静态属性/方法：@静态属性全类名@静态属性</span></span><br><span class="line"><span class="comment">  @静态属性全类名@静态方法</span></span><br><span class="line"><span class="comment">调用构造方法（构造器）：new cygames.shadowverse.royal.c_cost</span></span><br><span class="line"><span class="comment">运算符：+,-,*,/,%</span></span><br><span class="line"><span class="comment">逻辑运算符：in,not in,&gt;,&lt;,&gt;=,&lt;=,==,!=</span></span><br><span class="line"><span class="comment">遇见特殊符号应该写转义字符：比如&amp;amp</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;c_name!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> c_name!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">c_name like #&#123;c_name&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;s_class!=null&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果名字为null，后面的语句会凭空多出现一个and在sql中，所以为了避免这种情况还可以给前后增加&lt;where&gt;标签 --&gt;</span></span><br><span class="line">and s_class=#&#123;s_class&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;c_cost!=null&quot;</span>&gt;</span></span><br><span class="line">and c_cost=#&#123;c_cost&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;c_effect!=null&quot;</span>&gt;</span></span><br><span class="line">and c_effect like #&#123;c_effect&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- choose相当于分支选择，和switch case一个含义，以when和otherwise与之对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByRequireChoose&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line">select * from shadowverse where</span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;c_name!=null&quot;</span>&gt;</span></span><br><span class="line">c_name like #&#123;c_name&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;s_class!=null&quot;</span>&gt;</span> </span><br><span class="line">s_class=#&#123;s_class&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;c_cost!=null&quot;</span>&gt;</span></span><br><span class="line">c_cost=#&#123;c_cost&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;c_effect!=null&quot;</span>&gt;</span></span><br><span class="line">c_effect like #&#123;c_effect&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">c_id=#&#123;c_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- trim标签为字符串截取标签，主要是为了给sql添加或者删除某些前缀或后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByRequireTrim&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- trim有四个属性：</span></span><br><span class="line"><span class="comment">prefix:前缀，prefix给拼串后的整个字符串加上前缀</span></span><br><span class="line"><span class="comment">prefixOverrides:前缀覆盖，去掉整个字符串前面多余的字符</span></span><br><span class="line"><span class="comment">suffix:后缀</span></span><br><span class="line"><span class="comment">suffixOverrides:后缀覆盖</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> select * from shadowverse </span><br><span class="line"> <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;c_name!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> c_name!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">c_name like #&#123;c_name&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;s_class!=null&quot;</span>&gt;</span></span><br><span class="line">s_class=#&#123;s_class&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;c_cost!=null&quot;</span>&gt;</span></span><br><span class="line">c_cost=#&#123;c_cost&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;c_effect!=null&quot;</span>&gt;</span></span><br><span class="line">c_effect like #&#123;c_effect&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- foreach相当于遍历循环 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByRequireForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span></span><br><span class="line">select * from shadowverse where c_cost in</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">collection:指定要遍历的集合：list类型的参数会特殊处理封装在map中，mao的key就叫list</span></span><br><span class="line"><span class="comment">item：将当前遍历出的元素赋值给指定变量</span></span><br><span class="line"><span class="comment">separator：每个元素之间的分隔符</span></span><br><span class="line"><span class="comment">open：遍历出所有结果拼接一个开始的字符</span></span><br><span class="line"><span class="comment">close：遍历出所有结果拼接一个结束的字符</span></span><br><span class="line"><span class="comment">index：索引，遍历list时候index为索引，item指当前值</span></span><br><span class="line"><span class="comment">遍历map时候index就是map的key，item就是map的值</span></span><br><span class="line"><span class="comment">#&#123;变量名&#125;就能取出变量的值也就是当前遍历出的元素</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">#&#123;item&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试类(test)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">InputStream is = CardTest.class.getResourceAsStream(<span class="string">&quot;/mybatis.xml&quot;</span>);</span><br><span class="line"><span class="comment">//构建sqlSession的工厂</span></span><br><span class="line">SqlSessionFactory sessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个sqlSession</span></span><br><span class="line">SqlSession session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增卡牌信息</span></span><br><span class="line">CardDao cdao=session.getMapper(CardDao.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下为动态sql测试</span></span><br><span class="line">System.out.println(<span class="string">&quot;sssssssssssssssssssssssssssssssssss&quot;</span>);</span><br><span class="line">card crd=<span class="keyword">new</span> card(<span class="number">1</span>,<span class="string">&quot;%团长%&quot;</span>,<span class="string">&quot;royal&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;%爆能%&quot;</span>);</span><br><span class="line">List&lt;card&gt; lst=cdao.findByRequireIf(crd);</span><br><span class="line"><span class="keyword">for</span>(card cad: lst)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;费用：&quot;</span>+cad.getC_cost()+<span class="string">&quot;\t&quot;</span>+cad.getC_name()+<span class="string">&quot;   &quot;</span>+cad.getC_effect());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;</span>);</span><br><span class="line">card cgd=<span class="keyword">new</span> card(<span class="number">6</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="string">&quot;%疾走%&quot;</span>);</span><br><span class="line">List&lt;card&gt; sls=cdao.findByRequireChoose(cgd);</span><br><span class="line"><span class="keyword">for</span>(card cbd:sls)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;费用：&quot;</span>+cbd.getC_cost()+<span class="string">&quot;\t&quot;</span>+cbd.getC_name()+<span class="string">&quot;   &quot;</span>+cbd.getC_effect());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;_____________________________________&quot;</span>);</span><br><span class="line">card ced=<span class="keyword">new</span> card(<span class="number">1</span>,<span class="string">&quot;%野兽%&quot;</span>,<span class="string">&quot;vampire&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;%入场曲%&quot;</span>);</span><br><span class="line">List&lt;card&gt; tsi=cdao.findByRequireIf(ced);</span><br><span class="line"><span class="keyword">for</span>(card cod: tsi)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;费用：&quot;</span>+cod.getC_cost()+<span class="string">&quot;\t&quot;</span>+cod.getC_name()+<span class="string">&quot;   &quot;</span>+cod.getC_effect());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;、、、、、、、、、、、、、、、、、、、、、、、、、、、、&quot;</span>);</span><br><span class="line">List&lt;Integer&gt; sli=<span class="keyword">new</span> ArrayList();</span><br><span class="line">sli.add(<span class="number">1</span>);</span><br><span class="line">sli.add(<span class="number">5</span>);</span><br><span class="line">sli.add(<span class="number">4</span>);</span><br><span class="line">sli.add(<span class="number">9</span>);</span><br><span class="line">List&lt;card&gt; ssd=cdao.findByRequireForeach(sli);</span><br><span class="line"><span class="keyword">for</span>(card ddd: ssd)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;费用：&quot;</span>+ddd.getC_cost()+<span class="string">&quot;\t&quot;</span>+ddd.getC_name()+<span class="string">&quot;   &quot;</span>+ddd.getC_effect());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis的逆向工程mbg-Mybatis-Generator-："><a href="#Mybatis的逆向工程mbg-Mybatis-Generator-：" class="headerlink" title="Mybatis的逆向工程mbg(Mybatis Generator)："></a>Mybatis的逆向工程mbg(Mybatis Generator)：</h2><p><strong>Mybatis提供了一种尤为方便的代码生成器，对于各种懒人来说可谓是极大的福利，它可以根据表结构快速生成我们所需要的实体类、映射文件、以及各个接口，包含基本的增删改查和一些复杂操作，但是有的表结构连接等复杂查询还需要自己来写。</strong></p><p><strong>所需要的jar包： mybatis-generator-core-1.4.0.jar</strong></p><p><strong>xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- context相当于代码生成器的运行环境  targetRuntime为代码生成器的策略选择  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 连接到目标数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/cygames?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useSSL=FALSE&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- java类型解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否强制转换bigdecimals 默认为false --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- javaModelGenerator定义java模型来生成javabean的，也就是指定实体类生成策略</span></span><br><span class="line"><span class="comment"> targetPackage：为生成在的目标包</span></span><br><span class="line"><span class="comment"> targetProject：生成在的目标项目</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;shadowverse.card.entity&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- sqlMapGenerator定义sql映射的生成策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;shadowverse.card.mapper&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指java客户端的生成器，指定mapper接口的生成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;shadowverse.card.dao&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;.\src&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定要逆向分析的表结构 domainObjectName表示生成对应javabean的类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;shadowverse&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;shadow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试类(test)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shadowverse.card.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.exception.InvalidConfigurationException;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.exception.XMLParserException;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shadowverse.card.dao.shadowMapper;</span><br><span class="line"><span class="keyword">import</span> shadowverse.card.entity.shadow;</span><br><span class="line"><span class="keyword">import</span> shadowverse.card.entity.shadowExample;</span><br><span class="line"><span class="keyword">import</span> shadowverse.card.entity.shadowExample.Criteria;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> XMLParserException, IOException, InvalidConfigurationException, SQLException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">   <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">   File configFile = <span class="keyword">new</span> File(<span class="string">&quot;mbg.xml&quot;</span>);</span><br><span class="line">   ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">   Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">   DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">   MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">   myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">   </span><br><span class="line">InputStream is = test.class.getResourceAsStream(<span class="string">&quot;/mybatis.xml&quot;</span>);</span><br><span class="line"><span class="comment">//构建sqlSession的工厂</span></span><br><span class="line">SqlSessionFactory sessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个sqlSession</span></span><br><span class="line">SqlSession session = sessionFactory.openSession();</span><br><span class="line">shadowMapper svmapper=session.getMapper(shadowMapper.class);</span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line"><span class="comment">/*List&lt;shadow&gt; selectByExample=svmapper.selectByExample(null);*/</span></span><br><span class="line"><span class="comment">//根据卡牌费用和效果查询</span></span><br><span class="line">shadowExample se=<span class="keyword">new</span> shadowExample();</span><br><span class="line"><span class="comment">//创建一个criteria，这个就是拼装查询条件的</span></span><br><span class="line">Criteria ct=se.createCriteria();</span><br><span class="line">List&lt;String&gt; cli=<span class="keyword">new</span> ArrayList();</span><br><span class="line">cli.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">cli.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">cli.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">cli.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">cli.add(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">ct.andCCostIn(cli);</span><br><span class="line">ct.andCEffectLike(<span class="string">&quot;%爆能%&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加或的条件</span></span><br><span class="line">Criteria ct2=se.createCriteria();</span><br><span class="line">ct2.andSClassEqualTo(<span class="string">&quot;vampire&quot;</span>);</span><br><span class="line">se.or(ct2);</span><br><span class="line">List&lt;shadow&gt; sli=svmapper.selectByExample(se);</span><br><span class="line"><span class="keyword">for</span>(shadow ss:sli)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;费用：&quot;</span>+ss.getcCost()+ss.getcName()+<span class="string">&quot; 效果：&quot;</span>+ss.getcEffect());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：之后会自动生成两个实体类文件一个是基本的自命名的，一个是自命名后缀加了example的实体类文件，并且自动创建了映射mapper文件还有客户端文件接口文件,因为都太长了，这里只放出接口文件查看功能的java代码。</strong></p><p><img src="/img/frame/mybatisgenerator.png" alt="MyBatisGenerator"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shadowverse.card.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> shadowverse.card.entity.shadow;</span><br><span class="line"><span class="keyword">import</span> shadowverse.card.entity.shadowExample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">shadowMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">countByExample</span><span class="params">(shadowExample example)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByExample</span><span class="params">(shadowExample example)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Integer cId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(shadow record)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(shadow record)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;shadow&gt; <span class="title">selectByExample</span><span class="params">(shadowExample example)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">shadow <span class="title">selectByPrimaryKey</span><span class="params">(Integer cId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByExampleSelective</span><span class="params">(<span class="meta">@Param(&quot;record&quot;)</span> shadow record, <span class="meta">@Param(&quot;example&quot;)</span> shadowExample example)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByExample</span><span class="params">(<span class="meta">@Param(&quot;record&quot;)</span> shadow record, <span class="meta">@Param(&quot;example&quot;)</span> shadowExample example)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(shadow record)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method was generated by MyBatis Generator.</span></span><br><span class="line"><span class="comment"> * This method corresponds to the database table shadowverse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mbg</span>.generated Tue Mar 24 21:38:19 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(shadow record)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis复杂查询："><a href="#Mybatis复杂查询：" class="headerlink" title="Mybatis复杂查询："></a>Mybatis复杂查询：</h2><h3 id="1、映射类型："><a href="#1、映射类型：" class="headerlink" title="1、映射类型："></a>1、映射类型：</h3><ul><li><p><strong>在Mybatis里复杂查询可以分为一对一映射类型和一对多、多对一映射类型以及多对多映射，所谓的一对一类型，相当于一个班级对应一个老师，一个老师也只能带一个班级，一对多类型相当于一个老师可以对应多个班级，但是一个班级只能有一个老师，多对多原理可以理解成一个订单可以对应多种商品，每种商品也可以对应多个订单</strong></p><p>  <strong>总结：说到底，无论是一对一还是多对一，就是相当于让你理清楚查询的结构，根本没有必要纠结于什么一对一还是多对一的构思，我们只需要将所要查询的东西理清楚，通过主外键约束和sql语法呈现出来就好</strong></p></li></ul><h3 id="2、数据库表结构："><a href="#2、数据库表结构：" class="headerlink" title="2、数据库表结构："></a>2、数据库表结构：</h3><p><img src="/img/sql/qunyou.png" alt="player_table"></p><p><img src="/img/sql/classes.png" alt="class_table"></p><p><strong>注：这里以参赛选手进行数据库表的创建，分别是选手表和选手所选的职业表</strong></p><h3 id="3、创建实体类："><a href="#3、创建实体类：" class="headerlink" title="3、创建实体类："></a>3、创建实体类：</h3><ul><li><strong>注：创建实体类同时，提前想好关联的表数据，并在实体类中创建所需要关联的对象类</strong></li></ul><p><img src="/img/java/entity.png" alt="entity"></p><h3 id="4、使用ResultMap进行一对一级联查询："><a href="#4、使用ResultMap进行一对一级联查询：" class="headerlink" title="4、使用ResultMap进行一对一级联查询："></a>4、使用ResultMap进行一对一级联查询：</h3><ul><li><strong>这里选用选手与职业进行一对一的对应关系进行级联查询，既一个选手对应一个职业，一个职业对应一个选手，分别用了级联属性和分步查询</strong></li></ul><p><strong>player操作接口(Dao)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shadowverse.wincup.qq.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shadowverse.wincup.qq.entity.player;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">playerDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据pid查询参赛选手具体信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> player <span class="title">getPlayerinfoBypid</span><span class="params">(String pid)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据选手id查出参赛选手信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> player <span class="title">getPlayerinfoByStep</span><span class="params">(String pid)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>player映射文件(Mapper)：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;shadowverse.wincup.qq.dao.playerDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;ply&quot;</span> <span class="attr">id</span>=<span class="string">&quot;playersearch&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id为规定的主键</span></span><br><span class="line"><span class="comment">column为数据库的字段名</span></span><br><span class="line"><span class="comment">property为实体类的属性</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;p_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_age&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_sex&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_useclassid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_useclassid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_title&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_title&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↓联合查询：</span></span><br><span class="line"><span class="comment">1、级联属性封装结果集</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;result column=&quot;cl_id&quot; property=&quot;clas.cl_id&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;result column=&quot;c_name&quot; property=&quot;clas.c_name&quot;/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">2、使用association定义单个对象的封装规则</span></span><br><span class="line"><span class="comment">association可以指定联合的javaBean对象</span></span><br><span class="line"><span class="comment">property=&quot;clas&quot;,指定哪个属性是联合对象</span></span><br><span class="line"><span class="comment">javaType:指定这个属性对象类型[不能省略]</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;clas&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ccs&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cl_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cl_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;c_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;c_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPlayerinfoBypid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;playersearch&quot;</span>&gt;</span></span><br><span class="line">SELECT p.p_name,p.p_age,p.p_sex,p.p_title,</span><br><span class="line">c.c_name</span><br><span class="line">FROM player p,cclass c WHERE p.p_useclassid=c.cl_id and p.p_id=#&#123;pid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用association进行分步查询 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1、先按照选手id查出选手的具体信息</span></span><br><span class="line"><span class="comment"> 2、再根据查出选手具体信息中的职业id查出所选的职业</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;ply&quot;</span> <span class="attr">id</span>=<span class="string">&quot;playersearchStep&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;p_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_age&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_sex&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_useclassid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_useclassid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_title&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_title&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- association定义关联对象封装规则 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- select：表明当前属性调用指定的方法查出的结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;clas&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ccs&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;shadowverse.wincup.qq.dao.classDao.getclassBycid&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">&quot;p_useclassid&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- column：指定将哪一列的值传给这个方法↑ --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPlayerinfoByStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;playersearchStep&quot;</span>&gt;</span></span><br><span class="line">select * from player where p_id=#&#123;pid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：使用分步查询的时候，需要在关联的class类里，写上分步查询的接口和实现</strong></p><p><strong>class接口(Dao)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据职业id查询出对应职业</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> cclass <span class="title">getclassBycid</span><span class="params">(String cid)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br></pre></td></tr></table></figure><p><strong>class映射文件(mapper)：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getclassBycid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;ccs&quot;</span>&gt;</span></span><br><span class="line">select * from cclass where cl_id=#&#123;cid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>player测试类(test)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shadowverse.wincup.qq.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shadowverse.wincup.qq.dao.playerDao;</span><br><span class="line"><span class="keyword">import</span> shadowverse.wincup.qq.entity.player;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">playertest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">InputStream is = playertest.class.getResourceAsStream(<span class="string">&quot;/Mybatis.xml&quot;</span>);</span><br><span class="line"><span class="comment">//构建sqlSession的工厂</span></span><br><span class="line">SqlSessionFactory sessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个sqlSession</span></span><br><span class="line">SqlSession session = sessionFactory.openSession();</span><br><span class="line">playerDao pdao=session.getMapper(playerDao.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//一对一查询</span></span><br><span class="line">player pla=pdao.getPlayerinfoBypid(<span class="string">&quot;szb006&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;姓名： &quot;</span>+pla.getP_name()+<span class="string">&quot;\n性别：&quot;</span>+pla.getP_sex()+<span class="string">&quot;\n年龄：&quot;</span>+pla.getP_age()+<span class="string">&quot;\n称号：&quot;</span>+pla.getP_title()</span><br><span class="line">+<span class="string">&quot;\n职业：&quot;</span>+pla.getClas().getC_name());</span><br><span class="line"></span><br><span class="line"><span class="comment">//一对一分步查询↓</span></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">player ply=pdao.getPlayerinfoByStep(<span class="string">&quot;szb001&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;姓名： &quot;</span>+ply.getP_name()+<span class="string">&quot;\n性别：&quot;</span>+ply.getP_sex()+<span class="string">&quot;\n年龄：&quot;</span>+ply.getP_age()+<span class="string">&quot;\n称号：&quot;</span>+ply.getP_title()</span><br><span class="line">+<span class="string">&quot;\n职业：&quot;</span>+ply.getClas().getC_name());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、一对多和多对一的级联查询："><a href="#5、一对多和多对一的级联查询：" class="headerlink" title="5、一对多和多对一的级联查询："></a>5、一对多和多对一的级联查询：</h3><ul><li><strong>这里选用选手和职业进行多对一的关系查询，既一个选手对应一个职业，但是一个职业可以对应多个选手</strong></li></ul><p><strong>class操作接口(Dao)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shadowverse.wincup.qq.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shadowverse.wincup.qq.entity.cclass;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据职业id查询出对应成员信息以及部门</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> cclass <span class="title">getclassandPlayer</span><span class="params">(String cid)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据职业的id分步查询出选手和职业信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> cclass <span class="title">getclsandplyBystep</span><span class="params">(String cid)</span><span class="keyword">throws</span> RuntimeException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>class映射文件(mapper)：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;shadowverse.wincup.qq.dao.classDao&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;ccs&quot;</span> <span class="attr">id</span>=<span class="string">&quot;classsearch&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cl_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cl_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;c_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;c_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- collection定义关联的集合类型属性封装规则</span></span><br><span class="line"><span class="comment"> ofType:指定集合内元素类型</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;pla&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;ply&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义集合中封装元素规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;p_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_age&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_sex&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_useclassid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_useclassid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;p_title&quot;</span> <span class="attr">property</span>=<span class="string">&quot;p_title&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getclassandPlayer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;classsearch&quot;</span>&gt;</span></span><br><span class="line">SELECT c.cl_id,c.c_name,p.p_id,</span><br><span class="line">p.p_name,</span><br><span class="line">p.p_sex,</span><br><span class="line">p.p_age,</span><br><span class="line">p.p_title FROM cclass c left join player p on c.cl_id=p.p_useclassid WHERE c.cl_id=#&#123;cid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 分步查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;ccs&quot;</span> <span class="attr">id</span>=<span class="string">&quot;classstep&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cl_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cl_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;c_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;c_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;pla&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;shadowverse.wincup.qq.dao.playerDao.getPlayerinfoBycid&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">&quot;cl_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getclsandplyBystep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;classstep&quot;</span>&gt;</span></span><br><span class="line">select * from cclass where cl_id=#&#123;cid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这里一对多和一对一的分步查询操作一样，需要在player类中添加分步第一步查询的接口和映射文件</strong></p><p><strong>class测试类(test)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> shadowverse.wincup.qq.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shadowverse.wincup.qq.dao.classDao;</span><br><span class="line"><span class="keyword">import</span> shadowverse.wincup.qq.entity.cclass;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">playertest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">InputStream is = playertest.class.getResourceAsStream(<span class="string">&quot;/Mybatis.xml&quot;</span>);</span><br><span class="line"><span class="comment">//构建sqlSession的工厂</span></span><br><span class="line">SqlSessionFactory sessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个sqlSession</span></span><br><span class="line">SqlSession session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//集合中一对多，多对一查询</span></span><br><span class="line">System.out.println(<span class="string">&quot;++++++++++++++++++++++++++++++++++&quot;</span>);</span><br><span class="line">classDao csdao=session.getMapper(classDao.class);</span><br><span class="line">cclass clss=csdao.getclassandPlayer(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">System.out.println(clss);</span><br><span class="line">System.out.println(clss.getPla());</span><br><span class="line"></span><br><span class="line"><span class="comment">//一对多，多对一分步查询</span></span><br><span class="line">System.out.println(<span class="string">&quot;++++++++++++++++++++++++++++++++++&quot;</span>);</span><br><span class="line">cclass cla=csdao.getclsandplyBystep(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">System.out.println(cla);</span><br><span class="line">System.out.println(cla.getPla());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>总结：使用ResultMap进行联合查询的操作虽然逻辑清楚，但是代码复杂，（总而言之废话太多），所以我还是推荐ResultType进行返回Map类型来传递关联数据，最后接收参数和进行参数调用</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java-FrameのMybatis" scheme="https://neptunetwilight.github.io/tags/Java-Frame%E3%81%AEMybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring和Spring-mvc框架原理以及应用</title>
    <link href="https://neptunetwilight.github.io/2021/02/05/Spring%E5%92%8CSpring-mvc%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>https://neptunetwilight.github.io/2021/02/05/Spring%E5%92%8CSpring-mvc%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/</id>
    <published>2021-02-05T10:18:13.000Z</published>
    <updated>2021-02-06T09:53:48.531Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介:"></a>Spring简介:</h2><ul><li><strong>Spring是一个轻量级开源框架，由Rod JohnSon创建，它以使用基本的JavaBean来完成以前只可能由EJB(Enterprise JavaBean)来完成的工作</strong></li></ul><h2 id="Spring构成"><a href="#Spring构成" class="headerlink" title="Spring构成:"></a>Spring构成:</h2><ul><li>Spring本质就是一个轻量级的控制反转(IOC)和面向切面(AOP)的容器框架,它由七个模块组成分别是AOP、ORM、DAO、Context、Web、Web-mvc、Core。说它是轻量级是因为它可以在大小只有1mb多的Jar文件里被发布，此外Spring也是非侵入式的。</li></ul><p><img src="/img/frame/frame.png" alt="Spring框架图"></p><p><strong>侵入式框架：</strong>侵入式的做法就是要求用户代码“知道”框架的代码，表现为用户代码需要继承框架提供的类，如使用Struts时候，我需要继承它的类，才能使其运行，但这时候struts侵入到了我的代码里，这就是侵入式。</p><p><strong>非侵入式框架：</strong>非侵入式的就如我们的Spring， 使用spring时，编写一些业务类的时候不需要继承spring特定的类，通过配置完成依赖注入后就可以使用，此时，spring就没有侵入到我业务类的代码里。</p><p><strong>XML配置：</strong><br>首先导入spring的jar包：</p><ul><li>com.springsource.org.apache.commons.logging-1.1.1.jar</li><li>spring-beans-4.2.1.RELEASE.jar</li><li>spring-context-4.2.1.RELEASE.jar</li><li>spring-context-support-4.2.1.RELEASE,jar</li><li>spring-core-4.2.1.RELEASE.jar</li><li>spring-expression-4.2.1.RELEASE.jar</li></ul><p><strong>xml:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--keyvalue要管理的类型的实例--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;fstCtrl&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.senchen.spr.test.controller.FirstController&quot;</span>&gt;</span><br><span class="line">&lt;!--set方法  set方法需要的参数--&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;fsvs&quot;</span> ref=<span class="string">&quot;fstSvs&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;fstSvs&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.senchen.spr.test.service.impl.FirstServiceImpl&quot;</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;fmng&quot;</span> ref=<span class="string">&quot;fstMng&quot;</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：侵入式让用户代码产生对框架的依赖，这些代码不能在框架外使用，不利于代码的复用。但侵入式可以使用户跟框架更好的结合，更容易更充分的利用框架提供的功能。 非侵入式的代码则没有过多的依赖，可以很方便的迁移到其他地方。但是与用户代码互动的方式可能就比较复杂。</strong></p><h3 id="1-控制反转-Invension-Of-Control"><a href="#1-控制反转-Invension-Of-Control" class="headerlink" title="1.控制反转(Invension Of Control):**"></a>1.控制反转(Invension Of Control):**</h3><ul><li><p>它不是一种技术，而是一种思想，IOC意味着将你设计好的对象交给容器控制，而不是传统的由你在对象内直接控制。以前是由自己创建一个对象并对其进行操作，现在由IOC控制对象并从外部获取资源，由容器来帮我们查找并注入依赖对象，也就是依赖对象的获取方式的反转。</p></li><li><p><strong>依赖注入(Dependency Injection)：</strong></p><p>  <strong>依赖注入其实是控制反转的注入方式，他有三种注入方式</strong></p></li><li><p><strong>构造器(constructor)注入：</strong></p><p>  <strong>传统：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>依赖注入：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.oth.Person&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按顺序注入</span></span><br><span class="line"><span class="comment">&lt;constructor-arg value=&quot;x001&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;constructor-arg value=&quot;10&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;constructor-arg value=&quot;1.78&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 按类型注入</span></span><br><span class="line"><span class="comment">&lt;constructor-arg type=&quot;int&quot; value=&quot;12&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;x003&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;constructor-arg type=&quot;double&quot; value=&quot;1.92&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按下标注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;x006&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;double&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.82&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>setter方法注入：</strong></p><p> <strong>传统：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>依赖注入：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.oth.Users&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;x005&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.85&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>bean配置和生命周期</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--scope singleton只创建一次实例，prototype 每次getBean时创建新实例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.oth.Person&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;x006&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;double&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.82&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- alias 给bean起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;abc&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- init-method创建对象后立刻调用的方法 destroy-method 对象销毁前调用的方法  lzay-init默认为true，加载IOC容器时创建的实例 false的情况为使用getBean时创建实例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.oth.Dog&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">destory-method</span>=<span class="string">&quot;xyz&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>bean其他配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 公共属性bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;伊莉雅&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.oth.Person&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;abc&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.63&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>注入的方式：</strong></p></li><li><p>自动注入：Autowire分为两种类型，一种是根据类型注入(byType)，一种根据名称注入(byName)。</p></li></ul><p><strong>byType：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;fsvs001&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.test.service.FirstServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;f2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.test.controller.FirstController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--byType自动注入set方法队形的类型不能存在两个类型一致的bean即整个容器 autowire=&quot;byType&quot;  根据类型自动装配 禁止同一类型管理2个实例 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--↓为错误方式，请不要引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;fsvs002&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.test.service.FirstService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>byName：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;f3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.test.controller.FirstController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName/&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;bean id=&quot;</span><span class="attr">fsvs001</span>&quot; <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.test.service.FirstServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- byName自动注入容器中和set方法名一致的bean--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- *****************************************************--&gt;</span></span><br><span class="line">public class FirstController&#123;</span><br><span class="line"></span><br><span class="line">FirstService fsvs;</span><br><span class="line"></span><br><span class="line">public void setFsvs001(firstService fsvs)&#123;</span><br><span class="line">this.fsvs=fsvs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String execute()&#123;</span><br><span class="line">System.out.println(&quot;FirstController...execute&quot;);</span><br><span class="line">fsvs.del(10);</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>p命名空间注入:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">&quot;http://ww.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;p3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.oth.Person&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;20&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">p:page</span>=<span class="string">&quot;13&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>集合注入配置：</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;other&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.senchen.spr.oth.Other&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myArrays&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>cc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;ref value=&quot;fsvs&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myLists&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>dd<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ee<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ff<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;ref value=&quot;fsvs&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySets&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>gg<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hh<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ii<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;ref value=&quot;fsvs&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMaps&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;a1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;02&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;03&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;01&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;a2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;a ref&quot; value-ref=&quot;fsvs&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;w1&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;w2&quot;</span>&gt;</span>3306<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注解配置：</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;</span><br><span class="line">...</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.senchen.spr.oth&quot;</span>&gt;</span>扫描并自动加载oth及其子包所有注解，除过Repository</span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-面向切面编程-Aspect-Oriented-Programming"><a href="#2-面向切面编程-Aspect-Oriented-Programming" class="headerlink" title="2.面向切面编程(Aspect Oriented Programming):"></a>2.面向切面编程(Aspect Oriented Programming):</h3><ul><li><strong>AOP可以对业务逻辑的各个部分实现隔离，从而使得业务逻辑各部分耦合度降低，提高开发速率，假设把应用程序想成一个立体结构的话，OOP(Object Oriented Programming)是把纵向切入系统的利刃，将系统划分为很多模块的话，则AOP就是横向切入，将系统的重复操作提取出核心部分。它由七个部分组成：</strong></li></ul><ol><li>通知(advice)：</li></ol><ul><li>就是指切面必要完成的工作。</li></ul><ol start="2"><li>(Interceptor)拦截器：</li></ol><ul><li>advice的子接口，用于在转发或者重定向时拦截所需要用的参数</li></ul><ol start="3"><li>切面(Aspect)：</li></ol><ul><li>横切关注点(跨越应用程序多个模块的功能)即要切入的业务功能</li></ul><ol start="4"><li>切点(point)：</li></ol><ul><li>就是切入的某个类方法的集合，每个类拥有多个切点。</li></ul><ol start="5"><li>连接点(joinpoint)：</li></ol><ul><li>程序执行的某个特定位置，也就是其所连接到的方法。</li></ul><ol start="6"><li>代理(proxy)：</li></ol><ul><li>AOP容器所创建的虚拟的实体类，它继承了目标对象具体操作(也就是在目标基础上，增加了额外操作，扩展目标对象功能)，具体的还分为静态代理、动态代理、cglib代理。</li></ul><ol start="7"><li>目标(target)：</li></ol><ul><li>被通知的对象，即被代理的对象类型，例如A继承了B接口，则使用target(“B”),target(“A”)均可匹配到A。</li></ul><p><strong>AspectJ框架：</strong></p><ul><li>java社区里最完整最流行的框架，spring2.0以上版本中，可以使用基于AspectJ注解或基于xml配置的AOP。</li></ul><p><strong>配置：</strong></p><ul><li><p><strong>需要的jar包：</strong></p><p>  <strong>spring-aspects-4.2.1.RELEASE.jar</strong><br>  <strong>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</strong><br>  <strong>com.springsource.org.aopalliance-1.0.0.jar</strong></p></li><li><p><strong>XML:</strong></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.senchen&quot;</span>&gt;</span><span class="comment">&lt;!-- 避免  spring-mvc 再次创建一个Controller 实例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当Spring IOC容器侦测到Bean配置文件中的↑，会自动为与AspectJ切面匹配的Bean创建代理--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>AspectJ注解：</strong></p></li><li><p>要在Spring中声明AspectJ切面，只需要在IOC容器将切面声明为Bean实例。（拦截器前记得加上注解）</p></li><li><p><strong>通知(Advice)：</strong></p><p>  <strong>AspectJ支持5中类型的通知注解：</strong></p><ul><li><p>@Before：前置通知，在方法执行前执行</p></li><li><p>@After：后置通知，在方法执行后执行</p></li><li><p>@AfterRunning：返回通知，在方法返回结果后执行</p></li><li><p>@AfterRunning：返回通知，在方法返回结果后执行</p></li><li><p>@Around：环绕通知，围绕着方法执行</p></li></ul></li><li><p><strong>例子(example)：</strong></p></li></ul><p><strong>控制器(Controller)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">( )</span></span>&#123;</span><br><span class="line"><span class="comment">//集合A中获取id 和 name</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.getClass()+<span class="string">&quot; 调用.....save()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">( )</span></span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getClass()+<span class="string">&quot;...list()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拦截器(Interceptor)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntercepter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution( * com.senchen.ctrl.FirstController.*(..))&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;f1()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getParameter</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;接收 request 中的参数 ，保存到 集合A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@After(&quot;f1()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkModel</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;检测 Model 并保存到request 或 发送param &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkModelMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;检测 ModelMap 并保存到request 或 发送param &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试(Test)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.senchen.ctrl.FirstController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//手动创建实例</span></span><br><span class="line">FirstController fc = <span class="keyword">new</span> FirstController();</span><br><span class="line">fc.save();</span><br><span class="line">System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//spring 创建实例，我们只管调用</span></span><br><span class="line">ApplicationContext cxt = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;app.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">FirstController ct2 = (FirstController)cxt.getBean(<span class="string">&quot;firstController&quot;</span>);</span><br><span class="line"></span><br><span class="line">ct2.save();</span><br><span class="line">System.out.println(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line">ct2.list();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-MVC-Model-View-Control-："><a href="#Spring-MVC-Model-View-Control-：" class="headerlink" title="Spring-MVC(Model View Control)："></a>Spring-MVC(Model View Control)：</h2><ul><li><p><strong>简介：</strong><br><strong>Spring-MVC被包含于Spring框架中，它含有多种识图技术，包含Jsp、Velocity、Itext和POI。它分离了控制器、模型对象、分派器，以及处理程序对象角色，主要由DispatcherServlet、处理器映射、控制器、视图解析器、视图组成。</strong></p></li><li><p><strong>运行原理：</strong></p><ol><li><p>客户端请求提交到DispatcherServlet</p></li><li><p>由DispatcherServlet控制器查询一个或多个HandlerMapping，扫描到处理请求的Controller</p></li><li><p>DispatcherServlet将请求提交到Controller</p></li><li><p>Controller调用业务逻辑处理后，返回ModelAndView</p></li><li><p>DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图</p></li><li><p>视图负责将结果显示到客户端</p></li></ol></li><li><p><strong>所需jar包：</strong><br>  <strong>com.springsource.org.apache.commons.logging-1.1.1.jar</strong><br>  <strong>spring-beans-4.2.1.RELEASE.jar</strong><br>  <strong>spring-context-4.2.1.RELEASE.jar</strong><br>  <strong>spring-context-support-4.2.1.RELEASE.jar</strong><br>  <strong>spring-core-4.2.1.RELEASE.jar</strong><br>  <strong>spring-expression-4.2.1.RELEASE.jar</strong><br>  <strong>spring-web-4.2.1.RELEASE.jar</strong><br>  <strong>spring-webmvc-4.2.1.RELEASE.jar</strong></p></li><li><p><strong>web.xml配置（暂时利用servlet结合，后来将变成service层进行操作）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="tag"><span class="string">http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span><span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>example<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:appContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>example<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Spring-mvc配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.senchen.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 试图解析器  springMVC管理的jsp文件位置应该在 /WEB-INF/meto/  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jspViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/meto/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>控制器1(controller)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FirstController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;看看---------------创建了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/fff&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getClass()+<span class="string">&quot;\t日志1..f1()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>控制器2(controller)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sss&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">s1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getClass()+<span class="string">&quot;\t日志1..s1()..2&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;mySec&quot;</span>;</span><br><span class="line"><span class="comment">///WEB-INF/meto/ +  mySec +.jsp</span></span><br><span class="line"><span class="comment">//  redirect:/myFst.jsp</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>JSP(index)：</strong></p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;title&gt;My JSP &#x27;index.jsp&#x27; starting page&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;expires&quot;</span> content=<span class="string">&quot;0&quot;</span>&gt;    </span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;This is my page&quot;</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;</span><br><span class="line">--&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/fff&quot;&gt;测试1_进入springMVC类方法&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/fff.do&quot;&gt;测试2_进入springMVC类方法&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/myFst.jsp&quot;&gt;测试3_页面&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/WEB-INF/meto/mySec.jsp&quot;&gt;测试3_页面web-inf&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/sss.do&quot;&gt;测试3_类方法_页面&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java-FrameのSpring" scheme="https://neptunetwilight.github.io/tags/Java-Frame%E3%81%AESpring/"/>
    
  </entry>
  
  <entry>
    <title>用Java实现八大排序算法</title>
    <link href="https://neptunetwilight.github.io/2021/01/31/%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://neptunetwilight.github.io/2021/01/31/%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2021-01-31T09:47:38.000Z</published>
    <updated>2021-02-05T11:37:17.940Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、冒泡排序-Bubblesort"><a href="#一、冒泡排序-Bubblesort" class="headerlink" title="一、冒泡排序(Bubblesort):"></a>一、冒泡排序(Bubblesort):</h2><h3 id="原理-Principle"><a href="#原理-Principle" class="headerlink" title="原理(Principle):"></a>原理(Principle):</h3><ul><li>冒泡排序是比较简单的排序算法，它循环走过需要排序的元素，依次比较相邻的两个元素，如果顺序错误就交换，直至没有元素交换，完成排序。</li></ul><h3 id="时间复杂度-Time-Complexity"><a href="#时间复杂度-Time-Complexity" class="headerlink" title="时间复杂度(Time Complexity):"></a>时间复杂度(Time Complexity):</h3><ul><li>冒泡排序是一种用时间换空间的排序方法，最坏情况是把顺序的排列变成逆序，或者把逆序的数列变成顺序。在这种情况下，每一次比较都需要进行交换运算。好比我们对n个人进行排序，若两两间需要比较一次则比较次数为n-1次，那么进行一次冒泡排序的比较次数就会变成（n-1）+（n-2）+…+1=n*（n-1）/2，因此冒泡排序的时间复杂度为O(n^2)。</li></ul><table><thead><tr><th align="center">平均时间复杂度</th><th align="center">最好情况</th><th align="center">最坏情况</th><th align="center">空间复杂度</th></tr></thead><tbody><tr><td align="center">O(n²)</td><td align="center">O(n)</td><td align="center">O(n²)</td><td align="center">O(1)</td></tr></tbody></table><h3 id="图示说明-Img"><a href="#图示说明-Img" class="headerlink" title="图示说明(Img):"></a>图示说明(Img):</h3><p><img src="https://images.morethink.cn/bubble.gif" alt="Bubblesort"></p><h3 id="代码-code"><a href="#代码-code" class="headerlink" title="代码(code):"></a>代码(code):</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传统冒泡排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bubblesort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp; <span class="comment">//定义临时变量用于交换时的临时存放</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=arr.length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;<span class="comment">/*这里让i=arr数组长度进行倒序输出，</span></span><br><span class="line"><span class="comment">因为冒泡排序正着输出顺序为从大到小*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">temp=arr[j];</span><br><span class="line">arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;<span class="comment">//进行输出</span></span><br><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">59</span>,<span class="number">64</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">86</span>,<span class="number">15</span>,<span class="number">45</span>&#125;;</span><br><span class="line">bubblesort.bubble(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总的来说冒泡排序是一种简单易于理解的排序算法，而且是稳定的算法，冒泡排序的一个改进是，在内层循环之前设置一个标记变量，用于标记循环是否进行了交换，在内层循环结束时，若判断没有进行交换，则说明剩下的序列中，每个元素都小于等于后面一个元素，即已经有序，可终止循环。这样，冒泡排序的最好时间复杂度可以提升到O(n)。</li></ul><hr><h2 id="二、插入排序-Insertsort"><a href="#二、插入排序-Insertsort" class="headerlink" title="二、插入排序(Insertsort):"></a>二、插入排序(Insertsort):</h2><h3 id="原理-Principle-："><a href="#原理-Principle-：" class="headerlink" title="原理(Principle)："></a>原理(Principle)：</h3><ul><li>插入排序相当于人们在打扑克牌时整理牌序，通常我们将其中混乱的单张牌插入有序的牌中，为了要给插入的牌腾出空间，那么其后的牌需要给插入的牌位置因而需要后移。</li></ul><h3 id="时间复杂度-Time-Complexity-："><a href="#时间复杂度-Time-Complexity-：" class="headerlink" title="时间复杂度(Time Complexity)："></a>时间复杂度(Time Complexity)：</h3><ul><li>最好情况就是，序列已经是升序排列了，在这种情况下，需要进行的比较操作需（n-1）次即可。最坏情况就是，序列是降序排列，那么此时需要进行的比较共有n(n-1)/2次。插入排序的赋值操作是比较操作的次数加上 (n-1）次。平均来说插入排序算法的时间复杂度为O(n^2）。</li></ul><table><thead><tr><th align="center">平均时间复杂度</th><th align="center">最好情况</th><th align="center">最坏情况</th><th align="center">空间复杂度</th></tr></thead><tbody><tr><td align="center">O(n²)</td><td align="center">O(n)</td><td align="center">O(n²)</td><td align="center">O(1)</td></tr></tbody></table><h3 id="图示说明-Img-："><a href="#图示说明-Img-：" class="headerlink" title="图示说明(Img)："></a>图示说明(Img)：</h3><p><img src="https://images.morethink.cn/28749729-ca072084-7503-11e7-881c-92aa915ce369.gif" alt="Insertsort"></p><h3 id="代码-code-1"><a href="#代码-code-1" class="headerlink" title="代码(code):"></a>代码(code):</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">insertsort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;<span class="comment">//从零开始遍历需要循环的次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&gt;<span class="number">0</span>;j--)&#123;<span class="comment">//内部进行循环比较交换，将大的元素与小的元素进行位置交换</span></span><br><span class="line"><span class="keyword">if</span>(arr[j]&lt;arr[j-<span class="number">1</span>])&#123;<span class="comment">//循环比较直到后一个元素比前一个元素大为止</span></span><br><span class="line"><span class="keyword">int</span> temp=arr[j];</span><br><span class="line">arr[j]=arr[j-<span class="number">1</span>];</span><br><span class="line">arr[j-<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;<span class="comment">//进行输出</span></span><br><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">38</span>,<span class="number">44</span>,<span class="number">47</span>,<span class="number">46</span>,<span class="number">26</span>,<span class="number">15</span>,<span class="number">36</span>,<span class="number">19</span>,<span class="number">50</span>,<span class="number">48</span>,<span class="number">27</span>&#125;;</span><br><span class="line">insertsort.insert(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入排序所需要的时间取决于元素初始的排位顺序，如同刚刚所讲的最好情况和最坏情况，但是这中间用到的是元素的交换位置进行的排序而不是元素的后移。</li></ul><p><strong>元素后移代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert2</span><span class="params">(<span class="keyword">int</span>[] arr2)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> num = arr2[i];<span class="comment">//num赋予从下标i开始循环的值</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; num &lt; arr2[j - <span class="number">1</span>]; j--) &#123;<span class="comment">//数组中下标为j-1的值（也就是i-1）若大于刚才赋予的num里的下标所对应的i的值</span></span><br><span class="line">arr2[j] = arr2[j - <span class="number">1</span>];<span class="comment">//将下标j-1的值赋予了下标为j的位置也就完成了一次后移然后进行循环</span></span><br><span class="line">&#125;</span><br><span class="line">arr2[j] = num;<span class="comment">//因为j--的缘故现在j为原来j-1赋予了num的值</span></span><br><span class="line">&#125;            </span><br></pre></td></tr></table></figure><ul><li>插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。插入排序还可进行各种修改使得算法更加快捷，可进行二分插入排序也可修改成希尔排序</li></ul><hr><h2 id="三、希尔排序-Shellsort"><a href="#三、希尔排序-Shellsort" class="headerlink" title="三、希尔排序(Shellsort):"></a>三、希尔排序(Shellsort):</h2><h3 id="原理-Principle-1"><a href="#原理-Principle-1" class="headerlink" title="原理(Principle):"></a>原理(Principle):</h3><ul><li>希尔排序，也称 递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是 非稳定排序算法。希尔排序是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</li></ul><h3 id="时间复杂度-Time-Complexity-1"><a href="#时间复杂度-Time-Complexity-1" class="headerlink" title="时间复杂度(Time Complexity):"></a>时间复杂度(Time Complexity):</h3><ul><li>希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比O(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。</li></ul><table><thead><tr><th align="center">平均时间复杂度</th><th align="center">最好情况</th><th align="center">最坏情况</th><th align="center">空间复杂度</th></tr></thead><tbody><tr><td align="center">O(nlog2n)</td><td align="center">O(n)</td><td align="center">O(n²)</td><td align="center">O(1)</td></tr></tbody></table><h3 id="图示说明-Img-1"><a href="#图示说明-Img-1" class="headerlink" title="图示说明(Img):"></a>图示说明(Img):</h3><p><img src="https://images.morethink.cn/4697893fd8a952d01956e192640c1c3c.png" alt="Shellsort"></p><h3 id="代码-code-2"><a href="#代码-code-2" class="headerlink" title="代码(code):"></a>代码(code):</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">shellsort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellsort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> gap=arr.length/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/=<span class="number">2</span>)&#123;<span class="comment">//给数组分组，每次步长为2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=gap;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i-gap;j&gt;=<span class="number">0</span>;j-=gap)&#123;<span class="comment">//遍历各组中所有元素,j-=gap是用于和上一个分组内元素作比较</span></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+gap])&#123;<span class="comment">//如果当前元素大于加上步长后的元素，则交换</span></span><br><span class="line">temp=arr[j];</span><br><span class="line">arr[j]=arr[j+gap];</span><br><span class="line">arr[j+gap]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">0</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">7</span>&#125;;</span><br><span class="line">shellsort.shellsort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这是希尔排序的交换算法，但是这种操作并不是最好，反而在进行大量数据排序时比它的原型插入排序还慢，因此需要和插入排序一样进行移位而不是交换计算。</li></ul><p><strong>后移的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellsort2</span><span class="params">(<span class="keyword">int</span>[] arr2)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> gap=arr2.length/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=gap;i&lt;arr2.length;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j=i;</span><br><span class="line"><span class="keyword">int</span> temp=arr2[j];</span><br><span class="line"><span class="keyword">if</span>(arr2[j]&lt;arr2[j-gap])&#123;</span><br><span class="line"><span class="keyword">while</span>(j-gap&gt;=<span class="number">0</span>&amp;&amp;temp&lt;arr2[j-gap])&#123;</span><br><span class="line">arr2[j]=arr2[j-gap];</span><br><span class="line">j-=gap;</span><br><span class="line">&#125;</span><br><span class="line">arr2[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><hr><h2 id="四、归并排序-Mergesort"><a href="#四、归并排序-Mergesort" class="headerlink" title="四、归并排序(Mergesort):"></a>四、归并排序(Mergesort):</h2><h3 id="原理-Principle-：-1"><a href="#原理-Principle-：-1" class="headerlink" title="原理(Principle)："></a>原理(Principle)：</h3><ul><li>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素（认为直接有序）或者2个序列（1次比较和交换），然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。它是建立在归并操作上的一种有效的排序算法，1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。</li></ul><h3 id="时间复杂度-Time-Complexity-：-1"><a href="#时间复杂度-Time-Complexity-：-1" class="headerlink" title="时间复杂度(Time Complexity)："></a>时间复杂度(Time Complexity)：</h3><ul><li>归并的时间复杂度分析：主要考虑两个函数的时间花销，一、数组划分函数 二、有序数组归并函数<br>前者的时间复杂度为O（n）,因为代码中有2个长度为n的循环，所以时间复杂度为O（n）；<br>数组长度为n的归并排序所消耗的时间T[n]：调用前面函数将数组划分为两个部分，那每一个部分排序好所花时间为T[n/2]，最后将这两个部分的数组合并成一个有序数组的时间花费为O(n);</li></ul><p>公式：T[n]=2T[n/2]+O(n);</p><table><thead><tr><th align="center">平均时间复杂度</th><th align="center">最好情况</th><th align="center">最坏情况</th><th align="center">空间复杂度</th></tr></thead><tbody><tr><td align="center">O(nlogn)</td><td align="center">O(n)</td><td align="center">O(nlogn)</td><td align="center">O(1)</td></tr></tbody></table><h3 id="图示说明-Img-：-1"><a href="#图示说明-Img-：-1" class="headerlink" title="图示说明(Img)："></a>图示说明(Img)：</h3><p><img src="/img/sort/1024555-20161218163120151-452283750.png" alt="Example"></p><p><img src="https://images.morethink.cn/merging-sort.gif" alt="Mergesort"></p><h3 id="代码-code-3"><a href="#代码-code-3" class="headerlink" title="代码(code):"></a>代码(code):</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mergesort</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 原数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left分组时候的左边部分索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid中间部分索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right右边部分索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> temp 临时存放数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//分+合并</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergesorted</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;<span class="comment">//中间索引</span></span><br><span class="line"><span class="comment">//向左进行递归分解(递归)</span></span><br><span class="line">mergesorted(arr,left,mid,temp);</span><br><span class="line"><span class="comment">//向右(递归)</span></span><br><span class="line">mergesorted(arr,mid+<span class="number">1</span>,right,temp);</span><br><span class="line"><span class="comment">//调用合并</span></span><br><span class="line">merge(arr,left,mid,right,temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=left;<span class="comment">//初始化 i，左边有序序列的初始索引</span></span><br><span class="line"><span class="keyword">int</span> j=mid+<span class="number">1</span>;<span class="comment">//初始化j，右边有序序列的初始索引</span></span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;<span class="comment">//指向temp数组的当前索引</span></span><br><span class="line"><span class="comment">//上述索引可理解为指针(想成c/c++比较易于理解。。。个人看法)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先把左右两边开始填充，直到一边填充完毕为止</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=right)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&lt;=arr[j])&#123;</span><br><span class="line">temp[t]=arr[i];</span><br><span class="line">t+=<span class="number">1</span>;</span><br><span class="line">i+=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//反之如果右边小于左边的的元素，填充右边的</span></span><br><span class="line">temp[t]=arr[j];</span><br><span class="line">t+=<span class="number">1</span>;</span><br><span class="line">j+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把剩余的数填充到辅助数组中去</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">temp[t]=arr[i];</span><br><span class="line">t+=<span class="number">1</span>;</span><br><span class="line">i+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(j&lt;=right)&#123;</span><br><span class="line">temp[t]=arr[j];</span><br><span class="line">t+=<span class="number">1</span>;</span><br><span class="line">j+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从辅助数组中拷贝数据到原数组，☞最后一次</span></span><br><span class="line">t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tempLeft=left;</span><br><span class="line"><span class="keyword">while</span>(tempLeft&lt;=right)&#123;</span><br><span class="line">arr[tempLeft]=temp[t];</span><br><span class="line">t+=<span class="number">1</span>;</span><br><span class="line">tempLeft+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">23</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> temp[]=<span class="keyword">new</span> <span class="keyword">int</span>[arr.length];<span class="comment">//归并需要一个额外辅助数组</span></span><br><span class="line">mergesorted(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>, temp);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>归并排序最吸引人的性质是它能够保证将任意长度为N的数组排序所需时间和NlogN成正比，它的主要缺点则是他所需的额外空间和N成正比。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</li></ul><hr><h2 id="五、快速排序-Quicksort"><a href="#五、快速排序-Quicksort" class="headerlink" title="五、快速排序(Quicksort):"></a>五、快速排序(Quicksort):</h2><h3 id="原理-Principle-：-2"><a href="#原理-Principle-：-2" class="headerlink" title="原理(Principle)："></a>原理(Principle)：</h3><ul><li>找出一个元素（理论上可以随便找一个）作为基准(pivot),然后对数组进行分区操作,使基准左边元素的值都不大于基准值,基准右边的元素值 都不小于基准值，如此作为基准的元素调整到排序后的正确位置。递归快速排序，将其他n-1个元素也调整到排序后的正确位置。最后每个元素都是在排序后的正 确位置，排序完成。所以快速排序算法的核心算法是分区操作，即如何调整基准的位置以及调整返回基准的最终位置以便分治递归。</li></ul><h3 id="时间复杂度-Time-Complexity-：-2"><a href="#时间复杂度-Time-Complexity-：-2" class="headerlink" title="时间复杂度(Time Complexity)："></a>时间复杂度(Time Complexity)：</h3><ul><li> 快速排序涉及到递归调用，所以该算法的时间复杂度还需要从递归算法的复杂度开始说起， 递归算法的时间复杂度公式：T[n] = aT[n/b] + f(n)，快速排序最优的情况就是每一次取到的元素都刚好平分整个数组；<br>此时的时间复杂度公式则为：T[n] = 2T[n/2] + f(n)；T[n/2]为平分后的子数组的时间复杂度，f[n] 为平分这个数组时所花的时间，快速排序最优的情况下时间复杂度为：O( nlogn )<br>最差的情况就是每一次取到的元素就是数组中最小/最大的，这种情况其实就是冒泡排序了(每一次都排好一个元素的顺序)，这种情况时间复杂度就好计算了，就是冒泡排序的时间复杂度：T[n] = n * (n-1) = n^2 + n;</li></ul><table><thead><tr><th align="center">平均时间复杂度</th><th align="center">最好情况</th><th align="center">最坏情况</th><th align="center">空间复杂度</th></tr></thead><tbody><tr><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O( n^2 )</td><td align="center">O(1)</td></tr></tbody></table><h3 id="图示说明-Img-：-2"><a href="#图示说明-Img-：-2" class="headerlink" title="图示说明(Img)："></a>图示说明(Img)：</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif" alt="Example"></p><p><img src="/img/sort/quick.gif" alt="Quicksort"></p><h3 id="代码-code-4"><a href="#代码-code-4" class="headerlink" title="代码(code):"></a>代码(code):</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">quicksort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivot = a[low];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line"><span class="comment">//从后往前开始比较，直到遇到比pivot小的数,将其移到low位置,此时high位置的数在[]中有两个</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high &amp;&amp; a[high]&gt;=pivot) high--;</span><br><span class="line">a[low] = a[high];</span><br><span class="line"></span><br><span class="line"><span class="comment">//再从前开始比较，当然第一个a[low]是刚移过来的，low++,直到遇到比pivot小的数,将其替换到high位置的值</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high &amp;&amp; a[low]&lt;=pivot) low++;</span><br><span class="line">a[high]=a[low];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历到后来low&gt;high时，结束</span></span><br><span class="line">a[low] = pivot;</span><br><span class="line"><span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] data,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line"><span class="keyword">int</span> pivot = partition(data,low,high);</span><br><span class="line">quickSort(data,low,pivot-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">quickSort(data,pivot+<span class="number">1</span>,high);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">quicksort t = <span class="keyword">new</span> quicksort();</span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">a[i]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100000</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">t.quickSort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : a)</span><br><span class="line">System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>快速排序由于排序效率在同为 O(nlogn) 的几种排序方法中效率最高，因此经常被采用。再加上快速排序思想——分治法也确实非常实用，所以 在各大厂的面试习题中，快排总是最耀眼的那个。它的时间复杂度与选取基准数密不可分，因而还衍生出了各种基准数的选取方法，有固定基准数、随机基准数、三数取中等方法，还需要去认真学习</li></ul><hr><h2 id="六、选择排序-Selectsort"><a href="#六、选择排序-Selectsort" class="headerlink" title="六、选择排序(Selectsort):"></a>六、选择排序(Selectsort):</h2><h3 id="原理-Principle-：-3"><a href="#原理-Principle-：-3" class="headerlink" title="原理(Principle)："></a>原理(Principle)：</h3><ul><li>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</li></ul><h3 id="时间复杂度-Time-Complexity-：-3"><a href="#时间复杂度-Time-Complexity-：-3" class="headerlink" title="时间复杂度(Time Complexity)："></a>时间复杂度(Time Complexity)：</h3><ul><li>选择排序的复杂度分析。第一次内循环比较N - 1次，然后是N-2次，N-3次，……，最后一次内循环比较1次。共比较的次数是 (N - 1) + (N - 2) + … + 1，求等差数列和，得 (N - 1 + 1)* N / 2 = N^2 / 2。舍去最高项系数，其时间复杂度为 O(N^2)。属于不稳定算法</li></ul><table><thead><tr><th align="center">平均时间复杂度</th><th align="center">最好情况</th><th align="center">最坏情况</th><th align="center">空间复杂度</th></tr></thead><tbody><tr><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">O( n^2 )</td><td align="center">O(1)</td></tr></tbody></table><h3 id="图示说明-Img-：-3"><a href="#图示说明-Img-：-3" class="headerlink" title="图示说明(Img)："></a>图示说明(Img)：</h3><p><img src="https://images.morethink.cn/28749720-90304278-7503-11e7-9bc8-e3b56539d8bf.gif" alt="Selectsort"></p><h3 id="代码-code-5"><a href="#代码-code-5" class="headerlink" title="代码(code):"></a>代码(code):</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selectsort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="comment">//选出之后待排序中值最小的位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[min]) &#123;</span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最小值不等于当前值时进行交换</span></span><br><span class="line"><span class="keyword">if</span> (min != i) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = a[i];</span><br><span class="line">a[i] = a[min];</span><br><span class="line">a[min] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] arr=&#123;<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">11</span>&#125;;</span><br><span class="line">sort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>选择排序的简单和直观名副其实，这也造就了它”出了名的慢性子”，无论是哪种情况，哪怕原数组已排序完成，它也将花费将近n²/2次遍历来确认一遍。即便是这样，它的排序结果也还是不稳定的。 唯一值得高兴的是，它并不耗费额外的内存空间。</li></ul><hr><h2 id="七、堆排序-Heapsort"><a href="#七、堆排序-Heapsort" class="headerlink" title="七、堆排序(Heapsort):"></a>七、堆排序(Heapsort):</h2><h3 id="原理-Principle-：-4"><a href="#原理-Principle-：-4" class="headerlink" title="原理(Principle)："></a>原理(Principle)：</h3><ul><li>堆其实相当于一个完全二叉树，那么堆的含义就是：完全二叉树中任何一个非叶子节点的值均不大于（或不小于）其左，右孩子节点的值。 由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。因此我们可使用大顶堆进行升序排序, 使用小顶堆进行降序排序。</li></ul><h3 id="时间复杂度-Time-Complexity-：-4"><a href="#时间复杂度-Time-Complexity-：-4" class="headerlink" title="时间复杂度(Time Complexity)："></a>时间复杂度(Time Complexity)：</h3><ul><li>初始化建堆的时间复杂度为O(n)，排序重建堆的时间复杂度为nlog(n)，所以总的时间复杂度为O(n+nlogn)=O(nlogn)。另外堆排序的比较次数和序列的初始状态有关，但只是在序列初始状态为堆的情况下比较次数显著减少，在序列有序或逆序的情况下比较次数不会发生明显变化。</li></ul><table><thead><tr><th align="center">平均时间复杂度</th><th align="center">最好情况</th><th align="center">最坏情况</th><th align="center">空间复杂度</th></tr></thead><tbody><tr><td align="center">O(nlog2n)</td><td align="center">O(nlog2n)</td><td align="center">O(nlog2n)</td><td align="center">O(1)</td></tr></tbody></table><h3 id="图示说明-Img-：-4"><a href="#图示说明-Img-：-4" class="headerlink" title="图示说明(Img)："></a>图示说明(Img)：</h3><p><img src="https://images.morethink.cn/heap_sort_gif.gif" alt="Heapsort"></p><h3 id="代码-code-6"><a href="#代码-code-6" class="headerlink" title="代码(code):"></a>代码(code):</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">heapsort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> []arr = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">18</span>,<span class="number">778</span>,<span class="number">145</span>,<span class="number">99</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;排序前：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">sort(arr);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> []arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//1.构建大顶堆</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=arr.length/<span class="number">2</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="comment">//从第一个非叶子结点从下至上，从右至左调整结构</span></span><br><span class="line">adjustHeap(arr,i,arr.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.调整堆结构+交换堆顶元素与末尾元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=arr.length-<span class="number">1</span>;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">swap(arr,<span class="number">0</span>,j);<span class="comment">//将堆顶元素与末尾元素进行交换</span></span><br><span class="line">adjustHeap(arr,<span class="number">0</span>,j);<span class="comment">//重新对堆进行调整</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调整大顶堆（仅是调整过程，建立在大顶堆已构建的基础上）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span> []arr,<span class="keyword">int</span> i,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];<span class="comment">//先取出当前元素i</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=i*<span class="number">2</span>+<span class="number">1</span>;k&lt;length;k=k*<span class="number">2</span>+<span class="number">1</span>)&#123;<span class="comment">//从i结点的左子结点开始，也就是2i+1处开始</span></span><br><span class="line"><span class="keyword">if</span>(k+<span class="number">1</span>&lt;length &amp;&amp; arr[k]&lt;arr[k+<span class="number">1</span>])&#123;<span class="comment">//如果左子结点小于右子结点，k指向右子结点</span></span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(arr[k] &gt;temp)&#123;<span class="comment">//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）</span></span><br><span class="line">arr[i] = arr[k];</span><br><span class="line">i = k;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = temp;<span class="comment">//将temp值放到最终的位置</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> []arr,<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp=arr[a];</span><br><span class="line">arr[a] = arr[b];</span><br><span class="line">arr[b] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了</li></ul><hr><h2 id="八、基数排序-Radixsort"><a href="#八、基数排序-Radixsort" class="headerlink" title="八、基数排序(Radixsort):"></a>八、基数排序(Radixsort):</h2><h3 id="原理-Principle-：-5"><a href="#原理-Principle-：-5" class="headerlink" title="原理(Principle)："></a>原理(Principle)：</h3><ul><li>基数排序（Radix sort）是一种非比较型整数排序算法，其原理是将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</li></ul><p><strong>基数排序按照优先从高位或低位来排序有两种实现方案：</strong></p><ul><li><p><strong>MSD（Most significant digital） 从最左侧高位开始进行排序：</strong>先按k1排序分组, 同一组中记录, 关键码k1相等, 再对各组按k2排序分成子组, 之后, 对后面的关键码继续这样的排序分组, 直到按最次位关键码kd对各子组排序后. 再将各组连接起来, 便得到一个有序序列。MSD方式适用于位数多的序列。</p></li><li><p><strong>LSD （Least significant digital）从最右侧低位开始进行排序：</strong> 先从kd开始排序，再对kd-1进行排序，依次重复，直到对k1排序后便得到一个有序序列。LSD方式适用于位数少的序列。</p></li></ul><h3 id="时间复杂度-Time-Complexity-：-5"><a href="#时间复杂度-Time-Complexity-：-5" class="headerlink" title="时间复杂度(Time Complexity)："></a>时间复杂度(Time Complexity)：</h3><ul><li>对于给定的n个d位数，取值范围为[0,k]，我们使用计数排序比较元素的每一位，基数排序耗时Θ(n+k)，那么基数排序的复杂度为Θ(d(n+k))。</li></ul><table><thead><tr><th align="center">平均时间复杂度</th><th align="center">最好情况</th><th align="center">最坏情况</th><th align="center">空间复杂度</th></tr></thead><tbody><tr><td align="center">O(d*(n+r))</td><td align="center">O(d*(n+r))</td><td align="center">O(d*(n+r))</td><td align="center">O(1)</td></tr></tbody></table><p><img src="https://images.morethink.cn/radix-sort_sample.gif" alt="Radixsort"></p><h3 id="代码-code-7"><a href="#代码-code-7" class="headerlink" title="代码(code):"></a>代码(code):</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 各位装通法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] radixSort(<span class="keyword">int</span>[] A, <span class="keyword">int</span> n) &#123;</span><br><span class="line"><span class="keyword">int</span> length = n;</span><br><span class="line"><span class="keyword">int</span> divisor = <span class="number">1</span>;<span class="comment">// 定义每一轮的除数，1,10,100...</span></span><br><span class="line"><span class="keyword">int</span>[][] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][length];<span class="comment">// 定义了10个桶，以防每一位都一样全部放入一个桶中</span></span><br><span class="line"><span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">// 统计每个桶中实际存放的元素个数</span></span><br><span class="line"><span class="keyword">int</span> digit;<span class="comment">// 获取元素中对应位上的数字，即装入那个桶</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;<span class="comment">// 经过4次装通操作，排序完成</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> temp : A) &#123;<span class="comment">// 计算入桶</span></span><br><span class="line">digit = (temp / divisor) % <span class="number">10</span>;</span><br><span class="line">bucket[digit][count[digit]++] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;<span class="comment">// 被排序数组的下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">10</span>; b++) &#123;<span class="comment">// 从0到9号桶按照顺序取出</span></span><br><span class="line"><span class="keyword">if</span> (count[b] == <span class="number">0</span>)<span class="comment">// 如果这个桶中没有元素放入，那么跳过</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; count[b]; w++) &#123;</span><br><span class="line">A[k++] = bucket[b][w];</span><br><span class="line">&#125;</span><br><span class="line">count[b] = <span class="number">0</span>;<span class="comment">// 桶中的元素已经全部取出，计数器归零</span></span><br><span class="line">&#125;</span><br><span class="line">divisor *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] a=&#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">65</span>,<span class="number">156</span>,<span class="number">77</span>,<span class="number">98</span>&#125;;</span><br><span class="line">radixSort(a,a.length);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基数排序更适合用于对时间, 字符串等这些 整体权值未知的数据 进行排序。基数排序不改变相同元素之间的相对顺序，因此它是稳定的排序算法。</li></ul><hr><p><strong>参考资料：</strong></p><p><a href="https://www.cnblogs.com/morethink/p/8419151.html">morethink的博客</a></p><p><a href="https://www.cnblogs.com/haozhengfei/p/29ba40edbf659f2dbc6b429c2818c594.html">日月的弯刀的博客园</a></p><p><a href="https://blog.csdn.net/qq_35580883/article/details/79114134">TimeTDIT的CSDN</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="数据算法与结构" scheme="https://neptunetwilight.github.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E4%B8%8E%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://neptunetwilight.github.io/2021/01/27/hello-world/"/>
    <id>https://neptunetwilight.github.io/2021/01/27/hello-world/</id>
    <published>2021-01-27T06:38:55.664Z</published>
    <updated>2021-01-27T06:38:55.664Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
